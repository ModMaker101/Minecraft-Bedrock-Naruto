"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@react-facet/core");
const react_1 = __importStar(require("react"));
const createFiberRoot_1 = require("./createFiberRoot");
const createReconciler_1 = require("./createReconciler");
const setupHostConfig_1 = require("./setupHostConfig");
document.body.innerHTML = `<div id="root"></div>`;
const reconcilerInstance = (0, createReconciler_1.createReconciler)();
const root = document.getElementById('root');
const fiberRoot = (0, createFiberRoot_1.createFiberRoot)(reconcilerInstance)(root);
/**
 * Render function local to testing that shared the same instance of the reconciler.
 *
 * This is needed otherwise React complains that we are sharing a context across different renderers.
 */
const render = function render(ui) {
    reconcilerInstance.updateContainer(ui, fiberRoot, null, () => { });
};
afterEach(() => {
    reconcilerInstance.updateContainer(null, fiberRoot, null, () => { });
});
jest.useFakeTimers();
describe('mount', () => {
    describe('without facet', () => {
        it('renders text', () => {
            render(react_1.default.createElement("div", null, "Hello World"));
            expect(root).toContainHTML('<div id="root"><div>Hello World</div></div>');
        });
        it('sets the className', () => {
            render(react_1.default.createElement("div", { className: "testing" }, "Hello World"));
            expect(root).toContainHTML('<div id="root"><div class="testing">Hello World</div></div>');
        });
        it('sets the id', () => {
            render(react_1.default.createElement("div", { id: "testing" }, "Hello World"));
            expect(root).toContainHTML('<div id="root"><div id="testing">Hello World</div></div>');
        });
        it('sets the style', () => {
            render(react_1.default.createElement("div", { style: { background: 'red' } }, "Hello World"));
            expect(root).toContainHTML('<div id="root"><div style="background: red;">Hello World</div></div>');
        });
        it('sets the src', () => {
            render(react_1.default.createElement("img", { className: "image", src: "bananafrita.png" }));
            const img = document.getElementsByClassName('image')[0];
            // jsdom is adding the http://localhost
            expect(img && img.src).toEqual('http://localhost/bananafrita.png');
        });
        it('sets the value', () => {
            var _a;
            render(react_1.default.createElement("input", { value: "foo" }));
            expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<input value="foo">');
        });
        it('sets the type', () => {
            var _a;
            render(react_1.default.createElement(react_1.default.Fragment, null,
                react_1.default.createElement("input", { type: "text" }),
                react_1.default.createElement("input", { type: "password" }),
                react_1.default.createElement("input", { type: "button" })));
            expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<input type="text"><input type="password"><input type="button">');
        });
        it('sets disabled', () => {
            var _a;
            render(react_1.default.createElement("input", { disabled: true }));
            expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<input disabled="">');
        });
        it('sets cohinline', () => {
            var _a;
            render(react_1.default.createElement("fast-p", { cohinline: true }));
            expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<p cohinline=""></p>');
        });
        it('sets maxlength', () => {
            var _a;
            render(react_1.default.createElement("input", { type: "text", maxLength: 10 }));
            expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<input maxlength="10" type="text">');
        });
        it('sets the data-droppable', () => {
            var _a;
            render(react_1.default.createElement("div", { "data-droppable": true }));
            expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<div data-droppable=""></div>');
        });
        it('sets the data-narrate', () => {
            var _a;
            render(react_1.default.createElement("div", { "data-narrate": true }));
            expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<div data-narrate=""></div>');
        });
        it('sets the data-narrate (with value)', () => {
            var _a;
            render(react_1.default.createElement("div", { "data-narrate": "hello world" }));
            expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<div data-narrate="hello world"></div>');
        });
        it('sets the data-narrate-after', () => {
            var _a;
            render(react_1.default.createElement("div", { "data-narrate-after": "this comes after" }));
            expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<div data-narrate-after="this comes after"></div>');
        });
        it('sets the data-narrate-before', () => {
            var _a;
            render(react_1.default.createElement("div", { "data-narrate-before": "and this comes before" }));
            expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<div data-narrate-before="and this comes before"></div>');
        });
        it('sets the data-narrate-as', () => {
            var _a;
            render(react_1.default.createElement("div", { "data-narrate-as": "title" }));
            expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<div data-narrate-as="title"></div>');
        });
        it('sets the href and target', () => {
            var _a;
            render(react_1.default.createElement("a", { href: "url", target: "__blank" }));
            expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<a href="url" target="__blank"></a>');
        });
        it('sets dangerouslySetInnerHTML', () => {
            var _a;
            render(react_1.default.createElement("div", { dangerouslySetInnerHTML: { __html: '<span/>' } }));
            expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<div><span></span></div>');
        });
        describe('for svg', () => {
            it('renders foreignObject and sets dimensions', () => {
                var _a;
                render(react_1.default.createElement("svg", null,
                    react_1.default.createElement("foreignObject", { x: "50", y: "100", width: "150", height: "200" })));
                expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<svg><foreignObject height="200" x="50" width="150" y="100"></foreignObject></svg>');
            });
            it('sets the d', () => {
                var _a;
                render(react_1.default.createElement("fast-path", { d: "M0,0 L0,10 Z" }));
                expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<path d="M0,0 L0,10 Z"></path>');
            });
            it('sets the fill', () => {
                var _a;
                render(react_1.default.createElement("fast-path", { fill: "#ff0000" }));
                expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<path fill="#ff0000"></path>');
            });
            it('sets the stroke', () => {
                var _a;
                render(react_1.default.createElement("fast-path", { stroke: "#ff0000" }));
                expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<path stroke="#ff0000"></path>');
            });
            it('sets the width', () => {
                var _a;
                render(react_1.default.createElement("fast-svg", { width: "500" }));
                expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<svg width="500"></svg>');
            });
            it('sets the height', () => {
                var _a;
                render(react_1.default.createElement("fast-svg", { height: "500" }));
                expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<svg height="500"></svg>');
            });
            it('sets the x', () => {
                var _a;
                render(react_1.default.createElement("fast-rect", { x: "500" }));
                expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<rect x="500"></rect>');
            });
            it('sets the y', () => {
                var _a;
                render(react_1.default.createElement("fast-rect", { y: "500" }));
                expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<rect y="500"></rect>');
            });
            it('sets the cx', () => {
                var _a;
                render(react_1.default.createElement("fast-circle", { cx: "500" }));
                expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<circle cx="500"></circle>');
            });
            it('sets the cy', () => {
                var _a;
                render(react_1.default.createElement("fast-circle", { cy: "500" }));
                expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<circle cy="500"></circle>');
            });
            it('sets the r', () => {
                var _a;
                render(react_1.default.createElement("fast-circle", { r: "500" }));
                expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<circle r="500"></circle>');
            });
            it('sets the rx', () => {
                var _a;
                render(react_1.default.createElement("fast-ellipse", { rx: "500" }));
                expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<ellipse rx="500"></ellipse>');
            });
            it('sets the ry', () => {
                var _a;
                render(react_1.default.createElement("fast-ellipse", { ry: "500" }));
                expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<ellipse ry="500"></ellipse>');
            });
            it('sets the x1', () => {
                var _a;
                render(react_1.default.createElement("fast-line", { x1: "500" }));
                expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<line x1="500"></line>');
            });
            it('sets the x2', () => {
                var _a;
                render(react_1.default.createElement("fast-line", { x2: "500" }));
                expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<line x2="500"></line>');
            });
            it('sets the y1', () => {
                var _a;
                render(react_1.default.createElement("fast-line", { y1: "500" }));
                expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<line y1="500"></line>');
            });
            it('sets the y2', () => {
                var _a;
                render(react_1.default.createElement("fast-line", { y2: "500" }));
                expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<line y2="500"></line>');
            });
            it('sets the strokeWidth', () => {
                var _a;
                render(react_1.default.createElement("fast-line", { strokeWidth: "500" }));
                expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<line stroke-width="500"></line>');
            });
            it('sets the viewBox', () => {
                var _a;
                render(react_1.default.createElement("fast-svg", { viewBox: "0 0 100 100" }));
                expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<svg viewBox="0 0 100 100"></svg>');
            });
            it('sets the xLinkHref', () => {
                var _a;
                render(react_1.default.createElement("fast-use", { xLinkHref: "#test" }));
                expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<use xlink:href="#test"></use>');
            });
            it('sets the fillOpacity', () => {
                var _a;
                render(react_1.default.createElement("fast-path", { fillOpacity: "0.5" }));
                expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<path fill-opacity="0.5"></path>');
            });
            it('sets the strokeOpacity', () => {
                var _a;
                render(react_1.default.createElement("fast-path", { strokeOpacity: "0.5" }));
                expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<path stroke-opacity="0.5"></path>');
            });
            it('sets the strokeLinecap', () => {
                var _a;
                render(react_1.default.createElement("fast-path", { strokeLinecap: "round" }));
                expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<path stroke-linecap="round"></path>');
            });
            it('sets the strokeLinejoin', () => {
                var _a;
                render(react_1.default.createElement("fast-path", { strokeLinejoin: "round" }));
                expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<path stroke-linejoin="round"></path>');
            });
            it('sets the points', () => {
                var _a;
                render(react_1.default.createElement("fast-polygon", { points: "0,0 0,10 10,10" }));
                expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<polygon points="0,0 0,10 10,10"></polygon>');
            });
            it('sets the offset', () => {
                var _a;
                render(react_1.default.createElement("fast-stop", { offset: "0" }));
                expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<stop offset="0"></stop>');
            });
            it('sets the stopColor', () => {
                var _a;
                render(react_1.default.createElement("fast-stop", { stopColor: "#ff0000" }));
                expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<stop stop-color="#ff0000"></stop>');
            });
            it('sets the stopOpacity', () => {
                var _a;
                render(react_1.default.createElement("fast-stop", { stopOpacity: "0" }));
                expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<stop stop-opacity="0"></stop>');
            });
            it('sets the fontFamily', () => {
                var _a;
                render(react_1.default.createElement("fast-svg-text", { fontFamily: "verdana" }));
                expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<text font-family="verdana"></text>');
            });
            it('sets the fontSize', () => {
                var _a;
                render(react_1.default.createElement("fast-svg-text", { fontSize: "10" }));
                expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<text font-size="10"></text>');
            });
        });
    });
    describe('with facets', () => {
        it('renders text', () => {
            const textFacet = (0, core_1.createFacet)({ initialValue: 'Hello World' });
            render(react_1.default.createElement("fast-text", { text: textFacet }));
            expect(root).toContainHTML('<div id="root">Hello World</div>');
            textFacet.set('Updated World');
            expect(root).toContainHTML('<div id="root">Updated World</div>');
        });
        it('sets the className', () => {
            const classNameFacet = (0, core_1.createFacet)({ initialValue: 'testing' });
            render(react_1.default.createElement("fast-div", { className: classNameFacet }, "Hello World"));
            expect(root).toContainHTML('<div id="root"><div class="testing">Hello World</div></div>');
            classNameFacet.set('updated testing');
            expect(root).toContainHTML('<div id="root"><div class="updated testing">Hello World</div></div>');
        });
        it('sets the id', () => {
            const idFacet = (0, core_1.createFacet)({ initialValue: 'testing' });
            render(react_1.default.createElement("fast-div", { id: idFacet }, "Hello World"));
            expect(root).toContainHTML('<div id="root"><div id="testing">Hello World</div></div>');
            idFacet.set('updated testing');
            expect(root).toContainHTML('<div id="root"><div id="updated testing">Hello World</div></div>');
        });
        it('sets the style', () => {
            const backgroundFacet = (0, core_1.createFacet)({ initialValue: 'red' });
            render(react_1.default.createElement("fast-div", { style: { background: backgroundFacet } }, "Hello World"));
            expect(root).toContainHTML('<div id="root"><div style="background: red;">Hello World</div></div>');
            backgroundFacet.set('yellow');
            expect(root).toContainHTML('<div id="root"><div style="background: yellow;">Hello World</div></div>');
        });
        it('sets the src', () => {
            const srcFacet = (0, core_1.createFacet)({ initialValue: 'bananafrita.png' });
            render(react_1.default.createElement("fast-img", { className: "image", src: srcFacet }));
            const img = document.getElementsByClassName('image')[0];
            // jsdom is adding the http://localhost
            expect(img && img.src).toEqual('http://localhost/bananafrita.png');
            srcFacet.set('updated.png');
            expect(img && img.src).toEqual('http://localhost/updated.png');
        });
        it('sets the value', () => {
            var _a, _b;
            const valueFacet = (0, core_1.createFacet)({ initialValue: 'foo' });
            render(react_1.default.createElement("fast-input", { value: valueFacet }));
            expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<input value="foo">');
            valueFacet.set('updated');
            expect((_b = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _b !== void 0 ? _b : '').toBe('<input value="updated">');
        });
        it('sets the type', () => {
            var _a, _b;
            const textFacet = (0, core_1.createFacet)({ initialValue: 'text' });
            const passwordFacet = (0, core_1.createFacet)({ initialValue: 'password' });
            const buttonFacet = (0, core_1.createFacet)({ initialValue: 'button' });
            const radioFacet = (0, core_1.createFacet)({ initialValue: 'radio' });
            const checkboxFacet = (0, core_1.createFacet)({ initialValue: 'checkbox' });
            render(react_1.default.createElement(react_1.default.Fragment, null,
                react_1.default.createElement("fast-input", { type: textFacet }),
                react_1.default.createElement("fast-input", { type: passwordFacet }),
                react_1.default.createElement("fast-input", { type: buttonFacet }),
                react_1.default.createElement("fast-input", { type: radioFacet }),
                react_1.default.createElement("fast-input", { type: checkboxFacet })));
            expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<input type="text"><input type="password"><input type="button"><input type="radio"><input type="checkbox">');
            textFacet.set('checkbox');
            expect((_b = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _b !== void 0 ? _b : '').toBe('<input type="checkbox"><input type="password"><input type="button"><input type="radio"><input type="checkbox">');
        });
        it('sets disabled', () => {
            var _a, _b;
            const disabledFacet = (0, core_1.createFacet)({ initialValue: true });
            render(react_1.default.createElement("fast-input", { disabled: disabledFacet }));
            expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<input disabled="">');
            disabledFacet.set(false);
            expect((_b = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _b !== void 0 ? _b : '').toBe('<input>');
        });
        it('sets cohinline', () => {
            var _a, _b;
            const cohinlineFacet = (0, core_1.createFacet)({ initialValue: true });
            render(react_1.default.createElement("fast-p", { cohinline: cohinlineFacet }));
            expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<p cohinline=""></p>');
            cohinlineFacet.set(false);
            expect((_b = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _b !== void 0 ? _b : '').toBe('<p></p>');
        });
        it('sets maxlength', () => {
            var _a, _b;
            const maxLengthFacet = (0, core_1.createFacet)({ initialValue: 10 });
            render(react_1.default.createElement("fast-input", { type: "text", maxLength: maxLengthFacet }));
            expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<input maxlength="10" type="text">');
            maxLengthFacet.set(20);
            expect((_b = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _b !== void 0 ? _b : '').toBe('<input maxlength="20" type="text">');
        });
        it('should only accept numerical characters if the input type is number', () => {
            var _a, _b, _c, _d;
            const valueFacet = (0, core_1.createFacet)({ initialValue: 'e' });
            render(react_1.default.createElement("fast-input", { type: "number", value: valueFacet }));
            expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<input type="number">');
            valueFacet.set('1');
            expect((_b = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _b !== void 0 ? _b : '').toBe('<input type="number" value="1">');
            valueFacet.set('1e');
            expect((_c = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _c !== void 0 ? _c : '').toBe('<input type="number" value="1">');
            valueFacet.set('12');
            expect((_d = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _d !== void 0 ? _d : '').toBe('<input type="number" value="12">');
        });
        it('sets rows', () => {
            var _a, _b;
            const rowsFacet = (0, core_1.createFacet)({ initialValue: 10 });
            render(react_1.default.createElement("fast-textarea", { type: "text", rows: rowsFacet }));
            expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<textarea rows="10" type="text"></textarea>');
            rowsFacet.set(20);
            expect((_b = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _b !== void 0 ? _b : '').toBe('<textarea rows="20" type="text"></textarea>');
        });
        it('sets the data-droppable', () => {
            var _a, _b;
            const dataDroppableFacet = (0, core_1.createFacet)({ initialValue: true });
            render(react_1.default.createElement("fast-div", { "data-droppable": dataDroppableFacet }));
            expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<div data-droppable=""></div>');
            dataDroppableFacet.set(false);
            expect((_b = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _b !== void 0 ? _b : '').toBe('<div></div>');
        });
        it('sets the data narration properties', () => {
            const dataNarrateFacet = (0, core_1.createFacet)({ initialValue: true });
            const dataNarrateBeforeFacet = (0, core_1.createFacet)({ initialValue: 'this comes before' });
            const dataNarrateAsFacet = (0, core_1.createFacet)({ initialValue: 'title' });
            const dataNarrateAfterFacet = (0, core_1.createFacet)({ initialValue: 'this comes after' });
            render(react_1.default.createElement("fast-div", { "data-narrate": dataNarrateFacet, "data-narrate-before": dataNarrateBeforeFacet, "data-narrate-as": dataNarrateAsFacet, "data-narrate-after": dataNarrateAfterFacet }));
            const fastDivNode = root === null || root === void 0 ? void 0 : root.children[0];
            expect(fastDivNode.getAttribute('data-narrate')).toBe('');
            expect(fastDivNode.getAttribute('data-narrate-before')).toBe('this comes before');
            expect(fastDivNode.getAttribute('data-narrate-as')).toBe('title');
            expect(fastDivNode.getAttribute('data-narrate-after')).toBe('this comes after');
            dataNarrateFacet.set('some content');
            dataNarrateAsFacet.set('subtitle');
            dataNarrateBeforeFacet.set('also called prefix');
            dataNarrateAfterFacet.set('also called suffix');
            expect(fastDivNode.getAttribute('data-narrate')).toBe('some content');
            expect(fastDivNode.getAttribute('data-narrate-before')).toBe('also called prefix');
            expect(fastDivNode.getAttribute('data-narrate-as')).toBe('subtitle');
            expect(fastDivNode.getAttribute('data-narrate-after')).toBe('also called suffix');
            dataNarrateFacet.set(false);
            expect(fastDivNode.getAttribute('data-narrate')).toBe(null);
        });
        it('sets the data-testid', () => {
            var _a, _b;
            const dataFacet = (0, core_1.createFacet)({ initialValue: 'test-id' });
            render(react_1.default.createElement("fast-div", { "data-testid": dataFacet }));
            expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<div data-testid="test-id"></div>');
            dataFacet.set('updated-test-id');
            expect((_b = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _b !== void 0 ? _b : '').toBe('<div data-testid="updated-test-id"></div>');
        });
        it('sets the data-x-ray', () => {
            var _a, _b;
            const dataFacet = (0, core_1.createFacet)({ initialValue: true });
            render(react_1.default.createElement("fast-div", { "data-x-ray": dataFacet }));
            expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<div data-x-ray=""></div>');
            dataFacet.set(false);
            expect((_b = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _b !== void 0 ? _b : '').toBe('<div></div>');
        });
        it('sets the href and target', () => {
            var _a, _b;
            const hrefFacet = (0, core_1.createFacet)({ initialValue: 'url' });
            const targetFacet = (0, core_1.createFacet)({ initialValue: '_blank' });
            render(react_1.default.createElement("fast-a", { href: hrefFacet, target: targetFacet }));
            expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<a href="url" target="_blank"></a>');
            hrefFacet.set('updated');
            targetFacet.set('_top');
            expect((_b = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _b !== void 0 ? _b : '').toBe('<a href="updated" target="_top"></a>');
        });
        it('sets the autoPlay', () => {
            var _a, _b;
            const dataFacet = (0, core_1.createFacet)({ initialValue: true });
            render(react_1.default.createElement("fast-div", { autoPlay: dataFacet }));
            expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<div autoplay=""></div>');
            dataFacet.set(false);
            expect((_b = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _b !== void 0 ? _b : '').toBe('<div></div>');
        });
        it('sets the loop', () => {
            var _a, _b;
            const dataFacet = (0, core_1.createFacet)({ initialValue: true });
            render(react_1.default.createElement("fast-div", { loop: dataFacet }));
            expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<div loop=""></div>');
            dataFacet.set(false);
            expect((_b = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _b !== void 0 ? _b : '').toBe('<div></div>');
        });
        describe('for svg', () => {
            it('renders foreignObject and sets dimensions', () => {
                var _a;
                const xFacet = (0, core_1.createFacet)({ initialValue: '50' });
                const yFacet = (0, core_1.createFacet)({ initialValue: '100' });
                const widthFacet = (0, core_1.createFacet)({ initialValue: '150' });
                const heightFacet = (0, core_1.createFacet)({ initialValue: '200' });
                render(react_1.default.createElement("svg", null,
                    react_1.default.createElement("fast-foreignObject", { x: xFacet, y: yFacet, width: widthFacet, height: heightFacet })));
                expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<svg><foreignObject height="200" x="50" width="150" y="100"></foreignObject></svg>');
            });
            it('sets the d', () => {
                var _a, _b;
                const dFacet = (0, core_1.createFacet)({ initialValue: 'M0,0 L0,10 Z' });
                render(react_1.default.createElement("fast-path", { d: dFacet }));
                expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<path d="M0,0 L0,10 Z"></path>');
                dFacet.set('M0,10 L0,10 Z');
                expect((_b = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _b !== void 0 ? _b : '').toBe('<path d="M0,10 L0,10 Z"></path>');
            });
            it('sets the fill', () => {
                var _a, _b;
                const fillFacet = (0, core_1.createFacet)({ initialValue: '#ff0000' });
                render(react_1.default.createElement("fast-path", { fill: fillFacet }));
                expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<path fill="#ff0000"></path>');
                fillFacet.set('#00ff00');
                expect((_b = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _b !== void 0 ? _b : '').toBe('<path fill="#00ff00"></path>');
            });
            it('sets the stroke', () => {
                var _a, _b;
                const strokeFacet = (0, core_1.createFacet)({ initialValue: '#ff0000' });
                render(react_1.default.createElement("fast-path", { stroke: strokeFacet }));
                expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<path stroke="#ff0000"></path>');
                strokeFacet.set('#00ff00');
                expect((_b = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _b !== void 0 ? _b : '').toBe('<path stroke="#00ff00"></path>');
            });
            it('sets the width', () => {
                var _a, _b;
                const widthFacet = (0, core_1.createFacet)({ initialValue: '500' });
                render(react_1.default.createElement("fast-svg", { width: widthFacet }));
                expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<svg width="500"></svg>');
                widthFacet.set('600');
                expect((_b = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _b !== void 0 ? _b : '').toBe('<svg width="600"></svg>');
            });
            it('sets the height', () => {
                var _a, _b;
                const heightFacet = (0, core_1.createFacet)({ initialValue: '500' });
                render(react_1.default.createElement("fast-svg", { height: heightFacet }));
                expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<svg height="500"></svg>');
                heightFacet.set('600');
                expect((_b = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _b !== void 0 ? _b : '').toBe('<svg height="600"></svg>');
            });
            it('sets the x', () => {
                var _a, _b;
                const xFacet = (0, core_1.createFacet)({ initialValue: '500' });
                render(react_1.default.createElement("fast-rect", { x: xFacet }));
                expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<rect x="500"></rect>');
                xFacet.set('600');
                expect((_b = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _b !== void 0 ? _b : '').toBe('<rect x="600"></rect>');
            });
            it('sets the y', () => {
                var _a, _b;
                const yFacet = (0, core_1.createFacet)({ initialValue: '500' });
                render(react_1.default.createElement("fast-rect", { y: yFacet }));
                expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<rect y="500"></rect>');
                yFacet.set('600');
                expect((_b = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _b !== void 0 ? _b : '').toBe('<rect y="600"></rect>');
            });
            it('sets the cx', () => {
                var _a, _b;
                const cxFacet = (0, core_1.createFacet)({ initialValue: '500' });
                render(react_1.default.createElement("fast-circle", { cx: cxFacet }));
                expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<circle cx="500"></circle>');
                cxFacet.set('600');
                expect((_b = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _b !== void 0 ? _b : '').toBe('<circle cx="600"></circle>');
            });
            it('sets the cy', () => {
                var _a, _b;
                const cyFacet = (0, core_1.createFacet)({ initialValue: '500' });
                render(react_1.default.createElement("fast-circle", { cy: cyFacet }));
                expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<circle cy="500"></circle>');
                cyFacet.set('600');
                expect((_b = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _b !== void 0 ? _b : '').toBe('<circle cy="600"></circle>');
            });
            it('sets the r', () => {
                var _a, _b;
                const rFacet = (0, core_1.createFacet)({ initialValue: '500' });
                render(react_1.default.createElement("fast-circle", { r: rFacet }));
                expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<circle r="500"></circle>');
                rFacet.set('600');
                expect((_b = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _b !== void 0 ? _b : '').toBe('<circle r="600"></circle>');
            });
            it('sets the rx', () => {
                var _a, _b;
                const rxFacet = (0, core_1.createFacet)({ initialValue: '500' });
                render(react_1.default.createElement("fast-ellipse", { rx: rxFacet }));
                expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<ellipse rx="500"></ellipse>');
                rxFacet.set('600');
                expect((_b = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _b !== void 0 ? _b : '').toBe('<ellipse rx="600"></ellipse>');
            });
            it('sets the ry', () => {
                var _a, _b;
                const ryFacet = (0, core_1.createFacet)({ initialValue: '500' });
                render(react_1.default.createElement("fast-ellipse", { ry: ryFacet }));
                expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<ellipse ry="500"></ellipse>');
                ryFacet.set('600');
                expect((_b = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _b !== void 0 ? _b : '').toBe('<ellipse ry="600"></ellipse>');
            });
            it('sets the x1', () => {
                var _a, _b;
                const x1Facet = (0, core_1.createFacet)({ initialValue: '500' });
                render(react_1.default.createElement("fast-line", { x1: x1Facet }));
                expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<line x1="500"></line>');
                x1Facet.set('600');
                expect((_b = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _b !== void 0 ? _b : '').toBe('<line x1="600"></line>');
            });
            it('sets the x2', () => {
                var _a, _b;
                const x2Facet = (0, core_1.createFacet)({ initialValue: '500' });
                render(react_1.default.createElement("fast-line", { x2: x2Facet }));
                expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<line x2="500"></line>');
                x2Facet.set('600');
                expect((_b = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _b !== void 0 ? _b : '').toBe('<line x2="600"></line>');
            });
            it('sets the y1', () => {
                var _a, _b;
                const y1Facet = (0, core_1.createFacet)({ initialValue: '500' });
                render(react_1.default.createElement("fast-line", { y1: y1Facet }));
                expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<line y1="500"></line>');
                y1Facet.set('600');
                expect((_b = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _b !== void 0 ? _b : '').toBe('<line y1="600"></line>');
            });
            it('sets the y2', () => {
                var _a, _b;
                const y2Facet = (0, core_1.createFacet)({ initialValue: '500' });
                render(react_1.default.createElement("fast-line", { y2: y2Facet }));
                expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<line y2="500"></line>');
                y2Facet.set('600');
                expect((_b = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _b !== void 0 ? _b : '').toBe('<line y2="600"></line>');
            });
            it('sets the strokeWidth', () => {
                var _a, _b;
                const strokeWidthFacet = (0, core_1.createFacet)({ initialValue: '500' });
                render(react_1.default.createElement("fast-line", { strokeWidth: strokeWidthFacet }));
                expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<line stroke-width="500"></line>');
                strokeWidthFacet.set('600');
                expect((_b = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _b !== void 0 ? _b : '').toBe('<line stroke-width="600"></line>');
            });
            it('sets the viewBox', () => {
                var _a, _b;
                const viewBoxFacet = (0, core_1.createFacet)({ initialValue: '0 0 10 10' });
                render(react_1.default.createElement("fast-svg", { viewBox: viewBoxFacet }));
                expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<svg viewBox="0 0 10 10"></svg>');
                viewBoxFacet.set('0 0 20 20');
                expect((_b = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _b !== void 0 ? _b : '').toBe('<svg viewBox="0 0 20 20"></svg>');
            });
            it('sets the xLinkHref', () => {
                var _a, _b;
                const xLinkHrefFacet = (0, core_1.createFacet)({ initialValue: '#test1' });
                render(react_1.default.createElement("fast-use", { xLinkHref: xLinkHrefFacet }));
                expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<use xlink:href="#test1"></use>');
                xLinkHrefFacet.set('#test2');
                expect((_b = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _b !== void 0 ? _b : '').toBe('<use xlink:href="#test2"></use>');
            });
            it('sets the fillOpacity', () => {
                var _a, _b;
                const fillOpacityFacet = (0, core_1.createFacet)({ initialValue: '0.5' });
                render(react_1.default.createElement("fast-rect", { fillOpacity: fillOpacityFacet }));
                expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<rect fill-opacity="0.5"></rect>');
                fillOpacityFacet.set('0.6');
                expect((_b = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _b !== void 0 ? _b : '').toBe('<rect fill-opacity="0.6"></rect>');
            });
            it('sets the strokeOpacity', () => {
                var _a, _b;
                const strokeOpacityFacet = (0, core_1.createFacet)({ initialValue: '0.5' });
                render(react_1.default.createElement("fast-rect", { strokeOpacity: strokeOpacityFacet }));
                expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<rect stroke-opacity="0.5"></rect>');
                strokeOpacityFacet.set('0.6');
                expect((_b = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _b !== void 0 ? _b : '').toBe('<rect stroke-opacity="0.6"></rect>');
            });
            it('sets the strokeLinecap', () => {
                var _a, _b;
                const strokeLinecapFacet = (0, core_1.createFacet)({ initialValue: 'round' });
                render(react_1.default.createElement("fast-rect", { strokeLinecap: strokeLinecapFacet }));
                expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<rect stroke-linecap="round"></rect>');
                strokeLinecapFacet.set('square');
                expect((_b = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _b !== void 0 ? _b : '').toBe('<rect stroke-linecap="square"></rect>');
            });
            it('sets the strokeLinejoin', () => {
                var _a, _b;
                const strokeLinejoinFacet = (0, core_1.createFacet)({ initialValue: 'round' });
                render(react_1.default.createElement("fast-rect", { strokeLinejoin: strokeLinejoinFacet }));
                expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<rect stroke-linejoin="round"></rect>');
                strokeLinejoinFacet.set('square');
                expect((_b = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _b !== void 0 ? _b : '').toBe('<rect stroke-linejoin="square"></rect>');
            });
            it('sets the points', () => {
                var _a, _b;
                const pointsFacet = (0, core_1.createFacet)({ initialValue: '0 0 10 10' });
                render(react_1.default.createElement("fast-polygon", { points: pointsFacet }));
                expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<polygon points="0 0 10 10"></polygon>');
                pointsFacet.set('0 0 20 20');
                expect((_b = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _b !== void 0 ? _b : '').toBe('<polygon points="0 0 20 20"></polygon>');
            });
            it('sets the offset', () => {
                var _a, _b;
                const offsetFacet = (0, core_1.createFacet)({ initialValue: '0 0' });
                render(react_1.default.createElement("fast-stop", { offset: offsetFacet }));
                expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<stop offset="0 0"></stop>');
                offsetFacet.set('1 1');
                expect((_b = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _b !== void 0 ? _b : '').toBe('<stop offset="1 1"></stop>');
            });
            it('sets the stopColor', () => {
                var _a, _b;
                const stopColorFacet = (0, core_1.createFacet)({ initialValue: '#000' });
                render(react_1.default.createElement("fast-stop", { stopColor: stopColorFacet }));
                expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<stop stop-color="#000"></stop>');
                stopColorFacet.set('#fff');
                expect((_b = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _b !== void 0 ? _b : '').toBe('<stop stop-color="#fff"></stop>');
            });
            it('sets the stopOpacity', () => {
                var _a, _b;
                const stopOpacityFacet = (0, core_1.createFacet)({ initialValue: '0' });
                render(react_1.default.createElement("fast-stop", { stopOpacity: stopOpacityFacet }));
                expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<stop stop-opacity="0"></stop>');
                stopOpacityFacet.set('1');
                expect((_b = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _b !== void 0 ? _b : '').toBe('<stop stop-opacity="1"></stop>');
            });
            it('sets the fontFamily', () => {
                var _a, _b;
                const fontFamilyFacet = (0, core_1.createFacet)({ initialValue: 'Arial' });
                render(react_1.default.createElement("fast-svg-text", { fontFamily: fontFamilyFacet }));
                expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<text font-family="Arial"></text>');
                fontFamilyFacet.set('Helvetica');
                expect((_b = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _b !== void 0 ? _b : '').toBe('<text font-family="Helvetica"></text>');
            });
            it('sets the fontSize', () => {
                var _a, _b;
                const fontSizeFacet = (0, core_1.createFacet)({ initialValue: '10' });
                render(react_1.default.createElement("fast-svg-text", { fontSize: fontSizeFacet }));
                expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<text font-size="10"></text>');
                fontSizeFacet.set('20');
                expect((_b = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _b !== void 0 ? _b : '').toBe('<text font-size="20"></text>');
            });
        });
    });
    describe('setting listeners', () => {
        let onClick;
        let onFocus;
        let onBlur;
        let onMouseDown;
        let onMouseMove;
        let onMouseUp;
        let onTouchStart;
        let onTouchMove;
        let onTouchEnd;
        let onMouseEnter;
        let onMouseLeave;
        let onKeyPress;
        let onKeyDown;
        let onKeyUp;
        let div;
        beforeEach(() => {
            onClick = jest.fn();
            onFocus = jest.fn();
            onBlur = jest.fn();
            onMouseDown = jest.fn();
            onMouseMove = jest.fn();
            onMouseUp = jest.fn();
            onTouchStart = jest.fn();
            onTouchMove = jest.fn();
            onTouchEnd = jest.fn();
            onMouseEnter = jest.fn();
            onMouseLeave = jest.fn();
            onKeyPress = jest.fn();
            onKeyDown = jest.fn();
            onKeyUp = jest.fn();
            render(react_1.default.createElement("div", { className: "testing", onClick: onClick, onFocus: onFocus, onBlur: onBlur, onMouseDown: onMouseDown, onMouseMove: onMouseMove, onMouseUp: onMouseUp, onTouchStart: onTouchStart, onTouchMove: onTouchMove, onTouchEnd: onTouchEnd, onMouseEnter: onMouseEnter, onMouseLeave: onMouseLeave, onKeyPress: onKeyPress, onKeyDown: onKeyDown, onKeyUp: onKeyUp }, "Hello World"));
            div = document.getElementsByClassName('testing')[0];
            if (div === undefined)
                throw new Error('Root element not found');
        });
        it('supports onClick', () => {
            div.dispatchEvent(new Event('click'));
            expect(onClick).toHaveBeenCalled();
        });
        it('supports onFocus', () => {
            div.dispatchEvent(new Event('focus'));
            expect(onFocus).toHaveBeenCalled();
        });
        it('supports onBlur', () => {
            div.dispatchEvent(new Event('blur'));
            expect(onBlur).toHaveBeenCalled();
        });
        it('supports onMouseDown', () => {
            div.dispatchEvent(new Event('mousedown'));
            expect(onMouseDown).toHaveBeenCalled();
        });
        it('supports onMouseMove', () => {
            div.dispatchEvent(new Event('mousemove'));
            expect(onMouseMove).toHaveBeenCalled();
        });
        it('supports onMouseUp', () => {
            div.dispatchEvent(new Event('mouseup'));
            expect(onMouseUp).toHaveBeenCalled();
        });
        it('supports onTouchStart', () => {
            div.dispatchEvent(new Event('touchstart'));
            expect(onTouchStart).toHaveBeenCalled();
        });
        it('supports onTouchMove', () => {
            div.dispatchEvent(new Event('touchmove'));
            expect(onTouchMove).toHaveBeenCalled();
        });
        it('supports onTouchEnd', () => {
            div.dispatchEvent(new Event('touchend'));
            expect(onTouchEnd).toHaveBeenCalled();
        });
        it('supports onMouseEnter', () => {
            div.dispatchEvent(new Event('mouseenter'));
            expect(onMouseEnter).toHaveBeenCalled();
        });
        it('supports onMouseLeave', () => {
            div.dispatchEvent(new Event('mouseleave'));
            expect(onMouseLeave).toHaveBeenCalled();
        });
        it('supports onKeyPress', () => {
            div.dispatchEvent(new Event('keypress'));
            expect(onKeyPress).toHaveBeenCalled();
        });
        it('supports onKeyDown', () => {
            div.dispatchEvent(new Event('keydown'));
            expect(onKeyDown).toHaveBeenCalled();
        });
        it('supports onKeyUp', () => {
            div.dispatchEvent(new Event('keyup'));
            expect(onKeyUp).toHaveBeenCalled();
        });
    });
});
describe('update', () => {
    it('updates text', () => {
        function TestComponent() {
            const [hello, setHello] = (0, react_1.useState)(false);
            (0, react_1.useEffect)(() => {
                setTimeout(() => {
                    setHello(true);
                }, 1000);
            }, []);
            return react_1.default.createElement("div", null,
                hello ? 'Hello' : 'Goodbye',
                " World");
        }
        render(react_1.default.createElement(TestComponent, null));
        expect(root).toContainHTML('<div id="root"><div>Goodbye World</div></div>');
        jest.runAllTimers();
        expect(root).toContainHTML('<div id="root"><div>Hello World</div></div>');
    });
    it('updates className', () => {
        function TestComponent() {
            const [hello, setHello] = (0, react_1.useState)(false);
            (0, react_1.useEffect)(() => {
                setTimeout(() => {
                    setHello(true);
                }, 1000);
            }, []);
            return react_1.default.createElement("div", { className: hello ? 'hello' : 'goodbye' }, "Hello World");
        }
        render(react_1.default.createElement(TestComponent, null));
        expect(root).toContainHTML('<div id="root"><div class="goodbye">Hello World</div></div>');
        jest.runAllTimers();
        expect(root).toContainHTML('<div id="root"><div class="hello">Hello World</div></div>');
    });
    it('updates id', () => {
        function TestComponent() {
            const [hello, setHello] = (0, react_1.useState)(false);
            (0, react_1.useEffect)(() => {
                setTimeout(() => {
                    setHello(true);
                }, 1000);
            }, []);
            return react_1.default.createElement("div", { id: hello ? 'hello' : 'goodbye' }, "Hello World");
        }
        render(react_1.default.createElement(TestComponent, null));
        expect(root).toContainHTML('<div id="root"><div id="goodbye">Hello World</div></div>');
        jest.runAllTimers();
        expect(root).toContainHTML('<div id="root"><div id="hello">Hello World</div></div>');
    });
    it('updates style', () => {
        function TestComponent() {
            const [hello, setHello] = (0, react_1.useState)(false);
            (0, react_1.useEffect)(() => {
                setTimeout(() => {
                    setHello(true);
                }, 1000);
            }, []);
            return react_1.default.createElement("div", { style: hello ? { background: 'red' } : { background: 'yellow' } }, "Hello World");
        }
        render(react_1.default.createElement(TestComponent, null));
        expect(root).toContainHTML('<div id="root"><div style="background: yellow;">Hello World</div></div>');
        jest.runAllTimers();
        expect(root).toContainHTML('<div id="root"><div style="background: red;">Hello World</div></div>');
    });
    it('updates src', () => {
        function TestComponent() {
            const [src, setSrc] = (0, react_1.useState)(false);
            (0, react_1.useEffect)(() => {
                setTimeout(() => {
                    setSrc(true);
                }, 1000);
            }, []);
            return react_1.default.createElement("img", { className: "image", src: src ? 'banana.png' : 'frita.png' });
        }
        render(react_1.default.createElement(TestComponent, null));
        let img = document.getElementsByClassName('image')[0];
        // jsdom is adding the http://localhost
        expect(img && img.src).toEqual('http://localhost/frita.png');
        jest.runAllTimers();
        img = document.getElementsByClassName('image')[0];
        // jsdom is adding the http://localhost
        expect(img && img.src).toEqual('http://localhost/banana.png');
    });
    it('updates href', () => {
        var _a, _b;
        function TestComponent() {
            const [href, setHref] = (0, react_1.useState)(false);
            (0, react_1.useEffect)(() => {
                setTimeout(() => {
                    setHref(true);
                }, 1000);
            }, []);
            return react_1.default.createElement("a", { href: href ? 'new' : 'old' });
        }
        render(react_1.default.createElement(TestComponent, null));
        expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<a href="old"></a>');
        jest.runAllTimers();
        expect((_b = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _b !== void 0 ? _b : '').toBe('<a href="new"></a>');
    });
    it('updates target', () => {
        var _a, _b;
        function TestComponent() {
            const [target, setTarget] = (0, react_1.useState)(false);
            (0, react_1.useEffect)(() => {
                setTimeout(() => {
                    setTarget(true);
                }, 1000);
            }, []);
            return react_1.default.createElement("a", { target: target ? 'new' : 'old' });
        }
        render(react_1.default.createElement(TestComponent, null));
        expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<a target="old"></a>');
        jest.runAllTimers();
        expect((_b = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _b !== void 0 ? _b : '').toBe('<a target="new"></a>');
    });
    it('updates the value', () => {
        var _a, _b, _c;
        const MockComponent = () => {
            const [data, setData] = (0, react_1.useState)('foo');
            (0, react_1.useEffect)(() => {
                setTimeout(() => setData('bar'), 1);
                setTimeout(() => setData(undefined), 2);
            }, []);
            return react_1.default.createElement("input", { value: data });
        };
        render(react_1.default.createElement(MockComponent, null));
        expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<input value="foo">');
        jest.advanceTimersByTime(1);
        expect((_b = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _b !== void 0 ? _b : '').toBe('<input value="bar">');
        jest.advanceTimersByTime(1);
        expect((_c = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _c !== void 0 ? _c : '').toBe('<input>');
    });
    it('updates the type', () => {
        var _a, _b, _c;
        const MockComponent = () => {
            const [types, setTypes] = (0, react_1.useState)(['text', 'password', 'button']);
            (0, react_1.useEffect)(() => {
                setTimeout(() => setTypes(['button', 'text', 'password']), 1);
                setTimeout(() => setTypes([undefined, undefined, undefined]), 2);
            }, []);
            return (react_1.default.createElement(react_1.default.Fragment, null,
                react_1.default.createElement("input", { type: types[0] }),
                react_1.default.createElement("input", { type: types[1] }),
                react_1.default.createElement("input", { type: types[2] })));
        };
        render(react_1.default.createElement(MockComponent, null));
        expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<input type="text"><input type="password"><input type="button">');
        jest.advanceTimersByTime(1);
        expect((_b = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _b !== void 0 ? _b : '').toBe('<input type="button"><input type="text"><input type="password">');
        jest.advanceTimersByTime(1);
        expect((_c = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _c !== void 0 ? _c : '').toBe('<input><input><input>');
    });
    it('updates disabled', () => {
        var _a, _b, _c, _d;
        const MockComponent = () => {
            const [disabled, setDisabled] = (0, react_1.useState)(true);
            (0, react_1.useEffect)(() => {
                setTimeout(() => setDisabled(false), 1);
                setTimeout(() => setDisabled(true), 2);
                setTimeout(() => setDisabled(undefined), 3);
            }, []);
            return react_1.default.createElement("input", { disabled: disabled });
        };
        render(react_1.default.createElement(MockComponent, null));
        expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<input disabled="">');
        jest.advanceTimersByTime(1);
        expect((_b = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _b !== void 0 ? _b : '').toBe('<input>');
        jest.advanceTimersByTime(1);
        expect((_c = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _c !== void 0 ? _c : '').toBe('<input disabled="">');
        jest.advanceTimersByTime(1);
        expect((_d = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _d !== void 0 ? _d : '').toBe('<input>');
    });
    it('updates cohinline', () => {
        var _a, _b, _c, _d;
        const MockComponent = () => {
            const [cohinline, setCohinline] = (0, react_1.useState)(true);
            (0, react_1.useEffect)(() => {
                setTimeout(() => setCohinline(false), 1);
                setTimeout(() => setCohinline(true), 2);
                setTimeout(() => setCohinline(undefined), 3);
            }, []);
            return react_1.default.createElement("fast-p", { cohinline: cohinline });
        };
        render(react_1.default.createElement(MockComponent, null));
        expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<p cohinline=""></p>');
        jest.advanceTimersByTime(1);
        expect((_b = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _b !== void 0 ? _b : '').toBe('<p></p>');
        jest.advanceTimersByTime(1);
        expect((_c = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _c !== void 0 ? _c : '').toBe('<p cohinline=""></p>');
        jest.advanceTimersByTime(1);
        expect((_d = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _d !== void 0 ? _d : '').toBe('<p></p>');
    });
    it('updates maxLength', () => {
        var _a, _b, _c, _d;
        const MockComponent = () => {
            const [maxLength, setMaxLength] = (0, react_1.useState)(1);
            (0, react_1.useEffect)(() => {
                setTimeout(() => setMaxLength(undefined), 1);
                setTimeout(() => setMaxLength(2), 2);
                setTimeout(() => setMaxLength(undefined), 3);
            }, []);
            return react_1.default.createElement("input", { maxLength: maxLength });
        };
        render(react_1.default.createElement(MockComponent, null));
        expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<input maxlength="1">');
        jest.advanceTimersByTime(1);
        expect((_b = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _b !== void 0 ? _b : '').toBe('<input>');
        jest.advanceTimersByTime(1);
        expect((_c = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _c !== void 0 ? _c : '').toBe('<input maxlength="2">');
        jest.advanceTimersByTime(1);
        expect((_d = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _d !== void 0 ? _d : '').toBe('<input>');
    });
    it('updates data-droppable', () => {
        var _a, _b, _c, _d;
        const MockComponent = () => {
            const [droppable, setDroppable] = (0, react_1.useState)(true);
            (0, react_1.useEffect)(() => {
                setTimeout(() => setDroppable(undefined), 1);
                setTimeout(() => setDroppable(true), 2);
                setTimeout(() => setDroppable(undefined), 3);
            }, []);
            return react_1.default.createElement("div", { "data-droppable": droppable });
        };
        render(react_1.default.createElement(MockComponent, null));
        expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<div data-droppable=""></div>');
        jest.advanceTimersByTime(1);
        expect((_b = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _b !== void 0 ? _b : '').toBe('<div></div>');
        jest.advanceTimersByTime(1);
        expect((_c = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _c !== void 0 ? _c : '').toBe('<div data-droppable=""></div>');
        jest.advanceTimersByTime(1);
        expect((_d = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _d !== void 0 ? _d : '').toBe('<div></div>');
    });
    describe('for svg', () => {
        it('updates foreignObject dimensions', () => {
            var _a, _b, _c, _d, _e;
            const MockComponent = () => {
                const [xFacet, setXFacet] = (0, react_1.useState)('50');
                const [yFacet, setYFacet] = (0, react_1.useState)('100');
                const [widthFacet, setWidthFacet] = (0, react_1.useState)('150');
                const [heightFacet, setHeightFacet] = (0, react_1.useState)('200');
                (0, react_1.useEffect)(() => {
                    setTimeout(() => setXFacet('350'), 1);
                    setTimeout(() => setYFacet('400'), 2);
                    setTimeout(() => setWidthFacet('450'), 3);
                    setTimeout(() => setHeightFacet('500'), 4);
                }, []);
                return (react_1.default.createElement("svg", null,
                    react_1.default.createElement("fast-foreignObject", { x: xFacet, y: yFacet, width: widthFacet, height: heightFacet })));
            };
            render(react_1.default.createElement(MockComponent, null));
            expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<svg><foreignObject height="200" x="50" width="150" y="100"></foreignObject></svg>');
            jest.advanceTimersByTime(1);
            expect((_b = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _b !== void 0 ? _b : '').toBe('<svg><foreignObject height="200" x="350" width="150" y="100"></foreignObject></svg>');
            jest.advanceTimersByTime(1);
            expect((_c = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _c !== void 0 ? _c : '').toBe('<svg><foreignObject height="200" x="350" width="150" y="400"></foreignObject></svg>');
            jest.advanceTimersByTime(1);
            expect((_d = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _d !== void 0 ? _d : '').toBe('<svg><foreignObject height="200" x="350" width="450" y="400"></foreignObject></svg>');
            jest.advanceTimersByTime(1);
            expect((_e = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _e !== void 0 ? _e : '').toBe('<svg><foreignObject height="500" x="350" width="450" y="400"></foreignObject></svg>');
        });
        it('updates d', () => {
            var _a, _b, _c, _d;
            const MockComponent = () => {
                const [d, setD] = (0, react_1.useState)('M0,0 L0,10 Z');
                (0, react_1.useEffect)(() => {
                    setTimeout(() => setD('M0,10 L0,10 Z'), 1);
                    setTimeout(() => setD('M0,0 L0,10 Z'), 2);
                    setTimeout(() => setD(undefined), 3);
                }, []);
                return react_1.default.createElement("path", { d: d });
            };
            render(react_1.default.createElement(MockComponent, null));
            expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<path d="M0,0 L0,10 Z"></path>');
            jest.advanceTimersByTime(1);
            expect((_b = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _b !== void 0 ? _b : '').toBe('<path d="M0,10 L0,10 Z"></path>');
            jest.advanceTimersByTime(1);
            expect((_c = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _c !== void 0 ? _c : '').toBe('<path d="M0,0 L0,10 Z"></path>');
            jest.advanceTimersByTime(1);
            expect((_d = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _d !== void 0 ? _d : '').toBe('<path></path>');
        });
        it('updates fill', () => {
            var _a, _b, _c, _d;
            const MockComponent = () => {
                const [fill, setFill] = (0, react_1.useState)('#ff0000');
                (0, react_1.useEffect)(() => {
                    setTimeout(() => setFill('#00ff00'), 1);
                    setTimeout(() => setFill('#ff0000'), 2);
                    setTimeout(() => setFill(undefined), 3);
                }, []);
                return react_1.default.createElement("path", { fill: fill });
            };
            render(react_1.default.createElement(MockComponent, null));
            expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<path fill="#ff0000"></path>');
            jest.advanceTimersByTime(1);
            expect((_b = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _b !== void 0 ? _b : '').toBe('<path fill="#00ff00"></path>');
            jest.advanceTimersByTime(1);
            expect((_c = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _c !== void 0 ? _c : '').toBe('<path fill="#ff0000"></path>');
            jest.advanceTimersByTime(1);
            expect((_d = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _d !== void 0 ? _d : '').toBe('<path></path>');
        });
        it('updates stroke', () => {
            var _a, _b, _c, _d;
            const MockComponent = () => {
                const [stroke, setStroke] = (0, react_1.useState)('#ff0000');
                (0, react_1.useEffect)(() => {
                    setTimeout(() => setStroke('#00ff00'), 1);
                    setTimeout(() => setStroke('#ff0000'), 2);
                    setTimeout(() => setStroke(undefined), 3);
                }, []);
                return react_1.default.createElement("path", { stroke: stroke });
            };
            render(react_1.default.createElement(MockComponent, null));
            expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<path stroke="#ff0000"></path>');
            jest.advanceTimersByTime(1);
            expect((_b = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _b !== void 0 ? _b : '').toBe('<path stroke="#00ff00"></path>');
            jest.advanceTimersByTime(1);
            expect((_c = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _c !== void 0 ? _c : '').toBe('<path stroke="#ff0000"></path>');
            jest.advanceTimersByTime(1);
            expect((_d = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _d !== void 0 ? _d : '').toBe('<path></path>');
        });
        it('updates width', () => {
            var _a, _b, _c, _d;
            const MockComponent = () => {
                const [width, setWidth] = (0, react_1.useState)('500');
                (0, react_1.useEffect)(() => {
                    setTimeout(() => setWidth('600'), 1);
                    setTimeout(() => setWidth('500'), 2);
                    setTimeout(() => setWidth(undefined), 3);
                }, []);
                return react_1.default.createElement("svg", { width: width });
            };
            render(react_1.default.createElement(MockComponent, null));
            expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<svg width="500"></svg>');
            jest.advanceTimersByTime(1);
            expect((_b = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _b !== void 0 ? _b : '').toBe('<svg width="600"></svg>');
            jest.advanceTimersByTime(1);
            expect((_c = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _c !== void 0 ? _c : '').toBe('<svg width="500"></svg>');
            jest.advanceTimersByTime(1);
            expect((_d = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _d !== void 0 ? _d : '').toBe('<svg></svg>');
        });
        it('updates height', () => {
            var _a, _b, _c, _d;
            const MockComponent = () => {
                const [height, setHeight] = (0, react_1.useState)('500');
                (0, react_1.useEffect)(() => {
                    setTimeout(() => setHeight('600'), 1);
                    setTimeout(() => setHeight('500'), 2);
                    setTimeout(() => setHeight(undefined), 3);
                }, []);
                return react_1.default.createElement("svg", { height: height });
            };
            render(react_1.default.createElement(MockComponent, null));
            expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<svg height="500"></svg>');
            jest.advanceTimersByTime(1);
            expect((_b = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _b !== void 0 ? _b : '').toBe('<svg height="600"></svg>');
            jest.advanceTimersByTime(1);
            expect((_c = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _c !== void 0 ? _c : '').toBe('<svg height="500"></svg>');
            jest.advanceTimersByTime(1);
            expect((_d = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _d !== void 0 ? _d : '').toBe('<svg></svg>');
        });
        it('updates x', () => {
            var _a, _b, _c, _d;
            const MockComponent = () => {
                const [x, setX] = (0, react_1.useState)('500');
                (0, react_1.useEffect)(() => {
                    setTimeout(() => setX('600'), 1);
                    setTimeout(() => setX('500'), 2);
                    setTimeout(() => setX(undefined), 3);
                }, []);
                return react_1.default.createElement("rect", { x: x });
            };
            render(react_1.default.createElement(MockComponent, null));
            expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<rect x="500"></rect>');
            jest.advanceTimersByTime(1);
            expect((_b = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _b !== void 0 ? _b : '').toBe('<rect x="600"></rect>');
            jest.advanceTimersByTime(1);
            expect((_c = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _c !== void 0 ? _c : '').toBe('<rect x="500"></rect>');
            jest.advanceTimersByTime(1);
            expect((_d = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _d !== void 0 ? _d : '').toBe('<rect></rect>');
        });
        it('updates y', () => {
            var _a, _b, _c, _d;
            const MockComponent = () => {
                const [y, setY] = (0, react_1.useState)('500');
                (0, react_1.useEffect)(() => {
                    setTimeout(() => setY('600'), 1);
                    setTimeout(() => setY('500'), 2);
                    setTimeout(() => setY(undefined), 3);
                }, []);
                return react_1.default.createElement("rect", { y: y });
            };
            render(react_1.default.createElement(MockComponent, null));
            expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<rect y="500"></rect>');
            jest.advanceTimersByTime(1);
            expect((_b = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _b !== void 0 ? _b : '').toBe('<rect y="600"></rect>');
            jest.advanceTimersByTime(1);
            expect((_c = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _c !== void 0 ? _c : '').toBe('<rect y="500"></rect>');
            jest.advanceTimersByTime(1);
            expect((_d = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _d !== void 0 ? _d : '').toBe('<rect></rect>');
        });
        it('updates cx', () => {
            var _a, _b, _c, _d;
            const MockComponent = () => {
                const [cx, setCx] = (0, react_1.useState)('500');
                (0, react_1.useEffect)(() => {
                    setTimeout(() => setCx('600'), 1);
                    setTimeout(() => setCx('500'), 2);
                    setTimeout(() => setCx(undefined), 3);
                }, []);
                return react_1.default.createElement("circle", { cx: cx });
            };
            render(react_1.default.createElement(MockComponent, null));
            expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<circle cx="500"></circle>');
            jest.advanceTimersByTime(1);
            expect((_b = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _b !== void 0 ? _b : '').toBe('<circle cx="600"></circle>');
            jest.advanceTimersByTime(1);
            expect((_c = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _c !== void 0 ? _c : '').toBe('<circle cx="500"></circle>');
            jest.advanceTimersByTime(1);
            expect((_d = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _d !== void 0 ? _d : '').toBe('<circle></circle>');
        });
        it('updates cy', () => {
            var _a, _b, _c, _d;
            const MockComponent = () => {
                const [cy, setCy] = (0, react_1.useState)('500');
                (0, react_1.useEffect)(() => {
                    setTimeout(() => setCy('600'), 1);
                    setTimeout(() => setCy('500'), 2);
                    setTimeout(() => setCy(undefined), 3);
                }, []);
                return react_1.default.createElement("circle", { cy: cy });
            };
            render(react_1.default.createElement(MockComponent, null));
            expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<circle cy="500"></circle>');
            jest.advanceTimersByTime(1);
            expect((_b = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _b !== void 0 ? _b : '').toBe('<circle cy="600"></circle>');
            jest.advanceTimersByTime(1);
            expect((_c = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _c !== void 0 ? _c : '').toBe('<circle cy="500"></circle>');
            jest.advanceTimersByTime(1);
            expect((_d = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _d !== void 0 ? _d : '').toBe('<circle></circle>');
        });
        it('updates r', () => {
            var _a, _b, _c, _d;
            const MockComponent = () => {
                const [r, setR] = (0, react_1.useState)('500');
                (0, react_1.useEffect)(() => {
                    setTimeout(() => setR('600'), 1);
                    setTimeout(() => setR('500'), 2);
                    setTimeout(() => setR(undefined), 3);
                }, []);
                return react_1.default.createElement("circle", { r: r });
            };
            render(react_1.default.createElement(MockComponent, null));
            expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<circle r="500"></circle>');
            jest.advanceTimersByTime(1);
            expect((_b = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _b !== void 0 ? _b : '').toBe('<circle r="600"></circle>');
            jest.advanceTimersByTime(1);
            expect((_c = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _c !== void 0 ? _c : '').toBe('<circle r="500"></circle>');
            jest.advanceTimersByTime(1);
            expect((_d = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _d !== void 0 ? _d : '').toBe('<circle></circle>');
        });
        it('updates rx', () => {
            var _a, _b, _c, _d;
            const MockComponent = () => {
                const [rx, setRx] = (0, react_1.useState)('500');
                (0, react_1.useEffect)(() => {
                    setTimeout(() => setRx('600'), 1);
                    setTimeout(() => setRx('500'), 2);
                    setTimeout(() => setRx(undefined), 3);
                }, []);
                return react_1.default.createElement("ellipse", { rx: rx });
            };
            render(react_1.default.createElement(MockComponent, null));
            expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<ellipse rx="500"></ellipse>');
            jest.advanceTimersByTime(1);
            expect((_b = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _b !== void 0 ? _b : '').toBe('<ellipse rx="600"></ellipse>');
            jest.advanceTimersByTime(1);
            expect((_c = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _c !== void 0 ? _c : '').toBe('<ellipse rx="500"></ellipse>');
            jest.advanceTimersByTime(1);
            expect((_d = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _d !== void 0 ? _d : '').toBe('<ellipse></ellipse>');
        });
        it('updates ry', () => {
            var _a, _b, _c, _d;
            const MockComponent = () => {
                const [ry, setRy] = (0, react_1.useState)('500');
                (0, react_1.useEffect)(() => {
                    setTimeout(() => setRy('600'), 1);
                    setTimeout(() => setRy('500'), 2);
                    setTimeout(() => setRy(undefined), 3);
                }, []);
                return react_1.default.createElement("ellipse", { ry: ry });
            };
            render(react_1.default.createElement(MockComponent, null));
            expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<ellipse ry="500"></ellipse>');
            jest.advanceTimersByTime(1);
            expect((_b = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _b !== void 0 ? _b : '').toBe('<ellipse ry="600"></ellipse>');
            jest.advanceTimersByTime(1);
            expect((_c = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _c !== void 0 ? _c : '').toBe('<ellipse ry="500"></ellipse>');
            jest.advanceTimersByTime(1);
            expect((_d = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _d !== void 0 ? _d : '').toBe('<ellipse></ellipse>');
        });
        it('updates x1', () => {
            var _a, _b, _c, _d;
            const MockComponent = () => {
                const [x1, setX1] = (0, react_1.useState)('500');
                (0, react_1.useEffect)(() => {
                    setTimeout(() => setX1('600'), 1);
                    setTimeout(() => setX1('500'), 2);
                    setTimeout(() => setX1(undefined), 3);
                }, []);
                return react_1.default.createElement("line", { x1: x1 });
            };
            render(react_1.default.createElement(MockComponent, null));
            expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<line x1="500"></line>');
            jest.advanceTimersByTime(1);
            expect((_b = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _b !== void 0 ? _b : '').toBe('<line x1="600"></line>');
            jest.advanceTimersByTime(1);
            expect((_c = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _c !== void 0 ? _c : '').toBe('<line x1="500"></line>');
            jest.advanceTimersByTime(1);
            expect((_d = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _d !== void 0 ? _d : '').toBe('<line></line>');
        });
        it('updates x2', () => {
            var _a, _b, _c, _d;
            const MockComponent = () => {
                const [x2, setX2] = (0, react_1.useState)('500');
                (0, react_1.useEffect)(() => {
                    setTimeout(() => setX2('600'), 1);
                    setTimeout(() => setX2('500'), 2);
                    setTimeout(() => setX2(undefined), 3);
                }, []);
                return react_1.default.createElement("line", { x2: x2 });
            };
            render(react_1.default.createElement(MockComponent, null));
            expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<line x2="500"></line>');
            jest.advanceTimersByTime(1);
            expect((_b = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _b !== void 0 ? _b : '').toBe('<line x2="600"></line>');
            jest.advanceTimersByTime(1);
            expect((_c = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _c !== void 0 ? _c : '').toBe('<line x2="500"></line>');
            jest.advanceTimersByTime(1);
            expect((_d = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _d !== void 0 ? _d : '').toBe('<line></line>');
        });
        it('updates y1', () => {
            var _a, _b, _c, _d;
            const MockComponent = () => {
                const [y1, setY1] = (0, react_1.useState)('500');
                (0, react_1.useEffect)(() => {
                    setTimeout(() => setY1('600'), 1);
                    setTimeout(() => setY1('500'), 2);
                    setTimeout(() => setY1(undefined), 3);
                }, []);
                return react_1.default.createElement("line", { y1: y1 });
            };
            render(react_1.default.createElement(MockComponent, null));
            expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<line y1="500"></line>');
            jest.advanceTimersByTime(1);
            expect((_b = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _b !== void 0 ? _b : '').toBe('<line y1="600"></line>');
            jest.advanceTimersByTime(1);
            expect((_c = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _c !== void 0 ? _c : '').toBe('<line y1="500"></line>');
            jest.advanceTimersByTime(1);
            expect((_d = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _d !== void 0 ? _d : '').toBe('<line></line>');
        });
        it('updates y2', () => {
            var _a, _b, _c, _d;
            const MockComponent = () => {
                const [y2, setY2] = (0, react_1.useState)('500');
                (0, react_1.useEffect)(() => {
                    setTimeout(() => setY2('600'), 1);
                    setTimeout(() => setY2('500'), 2);
                    setTimeout(() => setY2(undefined), 3);
                }, []);
                return react_1.default.createElement("line", { y2: y2 });
            };
            render(react_1.default.createElement(MockComponent, null));
            expect((_a = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _a !== void 0 ? _a : '').toBe('<line y2="500"></line>');
            jest.advanceTimersByTime(1);
            expect((_b = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _b !== void 0 ? _b : '').toBe('<line y2="600"></line>');
            jest.advanceTimersByTime(1);
            expect((_c = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _c !== void 0 ? _c : '').toBe('<line y2="500"></line>');
            jest.advanceTimersByTime(1);
            expect((_d = root === null || root === void 0 ? void 0 : root.innerHTML) !== null && _d !== void 0 ? _d : '').toBe('<line></line>');
        });
    });
    describe('setting listeners', () => {
        let firstOnClick;
        let firstOnFocus;
        let firstOnBlur;
        let firstOnMouseDown;
        let firstOnMouseMove;
        let firstOnMouseUp;
        let firstOnTouchStart;
        let firstOnTouchMove;
        let firstOnTouchEnd;
        let firstOnMouseEnter;
        let firstOnMouseLeave;
        let firstOnKeyPress;
        let firstOnKeyDown;
        let firstOnKeyUp;
        let secondOnClick;
        let secondOnFocus;
        let secondOnBlur;
        let secondOnMouseDown;
        let secondOnMouseMove;
        let secondOnMouseUp;
        let secondOnTouchStart;
        let secondOnTouchMove;
        let secondOnTouchEnd;
        let secondOnMouseEnter;
        let secondOnMouseLeave;
        let secondOnKeyPress;
        let secondOnKeyDown;
        let secondOnKeyUp;
        let div;
        function TestComponent() {
            const [second, setSecond] = (0, react_1.useState)(false);
            (0, react_1.useEffect)(() => {
                setTimeout(() => {
                    setSecond(true);
                }, 1000);
            }, []);
            return (react_1.default.createElement("div", { className: "testing", onClick: second ? secondOnClick : firstOnClick, onFocus: second ? secondOnFocus : firstOnFocus, onBlur: second ? secondOnBlur : firstOnBlur, onMouseDown: second ? secondOnMouseDown : firstOnMouseDown, onMouseMove: second ? secondOnMouseMove : firstOnMouseMove, onMouseUp: second ? secondOnMouseUp : firstOnMouseUp, onTouchStart: second ? secondOnTouchStart : firstOnTouchStart, onTouchMove: second ? secondOnTouchMove : firstOnTouchMove, onTouchEnd: second ? secondOnTouchEnd : firstOnTouchEnd, onMouseEnter: second ? secondOnMouseEnter : firstOnMouseEnter, onMouseLeave: second ? secondOnMouseLeave : firstOnMouseLeave, onKeyPress: second ? secondOnKeyPress : firstOnKeyPress, onKeyDown: second ? secondOnKeyDown : firstOnKeyDown, onKeyUp: second ? secondOnKeyUp : firstOnKeyUp }, "Hello World"));
        }
        beforeEach(() => {
            firstOnClick = jest.fn();
            firstOnFocus = jest.fn();
            firstOnBlur = jest.fn();
            firstOnMouseDown = jest.fn();
            firstOnMouseMove = jest.fn();
            firstOnMouseUp = jest.fn();
            firstOnTouchStart = jest.fn();
            firstOnTouchMove = jest.fn();
            firstOnTouchEnd = jest.fn();
            firstOnMouseEnter = jest.fn();
            firstOnMouseLeave = jest.fn();
            firstOnKeyPress = jest.fn();
            firstOnKeyDown = jest.fn();
            firstOnKeyUp = jest.fn();
            secondOnClick = jest.fn();
            secondOnFocus = jest.fn();
            secondOnBlur = jest.fn();
            secondOnMouseDown = jest.fn();
            secondOnMouseMove = jest.fn();
            secondOnMouseUp = jest.fn();
            secondOnTouchStart = jest.fn();
            secondOnTouchMove = jest.fn();
            secondOnTouchEnd = jest.fn();
            secondOnMouseEnter = jest.fn();
            secondOnMouseLeave = jest.fn();
            secondOnKeyPress = jest.fn();
            secondOnKeyDown = jest.fn();
            secondOnKeyUp = jest.fn();
            render(react_1.default.createElement(TestComponent, null));
            div = document.getElementsByClassName('testing')[0];
            if (div === undefined)
                throw new Error('Root element not found');
        });
        it('supports onClick', () => {
            div.dispatchEvent(new Event('click'));
            expect(firstOnClick).toHaveBeenCalled();
            expect(secondOnClick).not.toHaveBeenCalled();
            firstOnClick.mockClear();
            secondOnClick.mockClear();
            jest.runAllTimers();
            div.dispatchEvent(new Event('click'));
            expect(firstOnClick).not.toHaveBeenCalled();
            expect(secondOnClick).toHaveBeenCalled();
        });
        it('supports onFocus', () => {
            div.dispatchEvent(new Event('focus'));
            expect(firstOnFocus).toHaveBeenCalled();
            expect(secondOnFocus).not.toHaveBeenCalled();
            firstOnFocus.mockClear();
            secondOnFocus.mockClear();
            jest.runAllTimers();
            div.dispatchEvent(new Event('focus'));
            expect(firstOnFocus).not.toHaveBeenCalled();
            expect(secondOnFocus).toHaveBeenCalled();
        });
        it('supports onBlur', () => {
            div.dispatchEvent(new Event('blur'));
            expect(firstOnBlur).toHaveBeenCalled();
            expect(secondOnBlur).not.toHaveBeenCalled();
            firstOnBlur.mockClear();
            secondOnBlur.mockClear();
            jest.runAllTimers();
            div.dispatchEvent(new Event('blur'));
            expect(firstOnBlur).not.toHaveBeenCalled();
            expect(secondOnBlur).toHaveBeenCalled();
        });
        it('supports onMouseDown', () => {
            div.dispatchEvent(new Event('mousedown'));
            expect(firstOnMouseDown).toHaveBeenCalled();
            expect(secondOnMouseDown).not.toHaveBeenCalled();
            firstOnMouseDown.mockClear();
            secondOnMouseDown.mockClear();
            jest.runAllTimers();
            div.dispatchEvent(new Event('mousedown'));
            expect(firstOnMouseDown).not.toHaveBeenCalled();
            expect(secondOnMouseDown).toHaveBeenCalled();
        });
        it('supports onMouseMove', () => {
            div.dispatchEvent(new Event('mousemove'));
            expect(firstOnMouseMove).toHaveBeenCalled();
            expect(secondOnMouseMove).not.toHaveBeenCalled();
            firstOnMouseMove.mockClear();
            secondOnMouseMove.mockClear();
            jest.runAllTimers();
            div.dispatchEvent(new Event('mousemove'));
            expect(firstOnMouseMove).not.toHaveBeenCalled();
            expect(secondOnMouseMove).toHaveBeenCalled();
        });
        it('supports onMouseUp', () => {
            div.dispatchEvent(new Event('mouseup'));
            expect(firstOnMouseUp).toHaveBeenCalled();
            expect(secondOnMouseUp).not.toHaveBeenCalled();
            firstOnMouseUp.mockClear();
            secondOnMouseUp.mockClear();
            jest.runAllTimers();
            div.dispatchEvent(new Event('mouseup'));
            expect(firstOnMouseUp).not.toHaveBeenCalled();
            expect(secondOnMouseUp).toHaveBeenCalled();
        });
        it('supports onTouchStart', () => {
            div.dispatchEvent(new Event('touchstart'));
            expect(firstOnTouchStart).toHaveBeenCalled();
            expect(secondOnTouchStart).not.toHaveBeenCalled();
            firstOnTouchStart.mockClear();
            secondOnTouchStart.mockClear();
            jest.runAllTimers();
            div.dispatchEvent(new Event('touchstart'));
            expect(firstOnTouchStart).not.toHaveBeenCalled();
            expect(secondOnTouchStart).toHaveBeenCalled();
        });
        it('supports onTouchMove', () => {
            div.dispatchEvent(new Event('touchmove'));
            expect(firstOnTouchMove).toHaveBeenCalled();
            expect(secondOnTouchMove).not.toHaveBeenCalled();
            firstOnTouchMove.mockClear();
            secondOnTouchMove.mockClear();
            jest.runAllTimers();
            div.dispatchEvent(new Event('touchmove'));
            expect(firstOnTouchMove).not.toHaveBeenCalled();
            expect(secondOnTouchMove).toHaveBeenCalled();
        });
        it('supports onTouchEnd', () => {
            div.dispatchEvent(new Event('touchend'));
            expect(firstOnTouchEnd).toHaveBeenCalled();
            expect(secondOnTouchEnd).not.toHaveBeenCalled();
            firstOnTouchEnd.mockClear();
            secondOnTouchEnd.mockClear();
            jest.runAllTimers();
            div.dispatchEvent(new Event('touchend'));
            expect(firstOnTouchEnd).not.toHaveBeenCalled();
            expect(secondOnTouchEnd).toHaveBeenCalled();
        });
        it('supports onMouseEnter', () => {
            div.dispatchEvent(new Event('mouseenter'));
            expect(firstOnMouseEnter).toHaveBeenCalled();
            expect(secondOnMouseEnter).not.toHaveBeenCalled();
            firstOnMouseEnter.mockClear();
            secondOnMouseEnter.mockClear();
            jest.runAllTimers();
            div.dispatchEvent(new Event('mouseenter'));
            expect(firstOnMouseEnter).not.toHaveBeenCalled();
            expect(secondOnMouseEnter).toHaveBeenCalled();
        });
        it('supports onMouseLeave', () => {
            div.dispatchEvent(new Event('mouseleave'));
            expect(firstOnMouseLeave).toHaveBeenCalled();
            expect(secondOnMouseLeave).not.toHaveBeenCalled();
            firstOnMouseLeave.mockClear();
            secondOnMouseLeave.mockClear();
            jest.runAllTimers();
            div.dispatchEvent(new Event('mouseleave'));
            expect(firstOnMouseLeave).not.toHaveBeenCalled();
            expect(secondOnMouseLeave).toHaveBeenCalled();
        });
        it('supports onKeyPress', () => {
            div.dispatchEvent(new Event('keypress'));
            expect(firstOnKeyPress).toHaveBeenCalled();
            expect(secondOnKeyPress).not.toHaveBeenCalled();
            firstOnKeyPress.mockClear();
            secondOnKeyPress.mockClear();
            jest.runAllTimers();
            div.dispatchEvent(new Event('keypress'));
            expect(firstOnKeyPress).not.toHaveBeenCalled();
            expect(secondOnKeyPress).toHaveBeenCalled();
        });
        it('supports onKeyDown', () => {
            div.dispatchEvent(new Event('keydown'));
            expect(firstOnKeyDown).toHaveBeenCalled();
            expect(secondOnKeyDown).not.toHaveBeenCalled();
            firstOnKeyDown.mockClear();
            secondOnKeyDown.mockClear();
            jest.runAllTimers();
            div.dispatchEvent(new Event('keydown'));
            expect(firstOnKeyDown).not.toHaveBeenCalled();
            expect(secondOnKeyDown).toHaveBeenCalled();
        });
        it('supports onKeyUp', () => {
            div.dispatchEvent(new Event('keyup'));
            expect(firstOnKeyUp).toHaveBeenCalled();
            expect(secondOnKeyUp).not.toHaveBeenCalled();
            firstOnKeyUp.mockClear();
            secondOnKeyUp.mockClear();
            jest.runAllTimers();
            div.dispatchEvent(new Event('keyup'));
            expect(firstOnKeyUp).not.toHaveBeenCalled();
            expect(secondOnKeyUp).toHaveBeenCalled();
        });
    });
});
describe('umnount', () => {
    it('hostConfig.removeChild should cleanup children instances', () => {
        var _a, _b;
        const hostConfig = (0, setupHostConfig_1.setupHostConfig)();
        const child = {
            children: new Set(),
            element: document.createElement('div'),
            styleUnsubscribers: new Map(),
        };
        const parentInstance = {
            children: new Set(),
            element: document.createElement('div'),
            styleUnsubscribers: new Map(),
        };
        (_a = hostConfig.appendChild) === null || _a === void 0 ? void 0 : _a.call(hostConfig, parentInstance, child);
        expect(parentInstance.children.size).toBe(1);
        (_b = hostConfig.removeChild) === null || _b === void 0 ? void 0 : _b.call(hostConfig, parentInstance, child);
        expect(parentInstance.children.size).toBe(0);
    });
    it('hostConfig.removeChildFromContainer should cleanup children instances', () => {
        var _a, _b;
        const hostConfig = (0, setupHostConfig_1.setupHostConfig)();
        const child = {
            children: new Set(),
            element: document.createElement('div'),
            styleUnsubscribers: new Map(),
        };
        const parentInstance = {
            children: new Set(),
            element: document.createElement('div'),
            styleUnsubscribers: new Map(),
        };
        (_a = hostConfig.appendChild) === null || _a === void 0 ? void 0 : _a.call(hostConfig, parentInstance, child);
        expect(parentInstance.children.size).toBe(1);
        (_b = hostConfig.removeChildFromContainer) === null || _b === void 0 ? void 0 : _b.call(hostConfig, parentInstance, child);
        expect(parentInstance.children.size).toBe(0);
    });
    it('unsubscribes from all facets when a element component is unmounted', () => {
        const unsubscribe = jest.fn();
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        const facet = {
            get: () => 'text',
            observe: jest.fn().mockReturnValue(unsubscribe),
        };
        render(react_1.default.createElement("fast-div", { style: { background: facet, color: facet }, className: facet, "data-droppable": facet, "data-narrate": facet, "data-narrate-before": facet, "data-narrate-after": facet, "data-narrate-as": facet, "data-testid": facet, "data-x-ray": facet, src: facet, href: facet, target: facet, autoPlay: facet, loop: facet, disabled: facet, maxLength: facet, rows: facet, value: facet, type: facet }));
        // on mount, we verify that we have added 20 subscriptions (one for each prop and style above)
        expect(facet.observe).toHaveBeenCalledTimes(20);
        // on unmount, we check that unsubscribe was called once for each subscription
        render(react_1.default.createElement(react_1.default.Fragment, null));
        expect(unsubscribe).toHaveBeenCalledTimes(20);
    });
    it('unsubscribes from the text facet when a fast-text component is unmounted', () => {
        const unsubscribe = jest.fn();
        const facet = {
            get: () => 'text',
            observe: jest.fn().mockReturnValue(unsubscribe),
        };
        render(react_1.default.createElement("fast-text", { text: facet }));
        expect(facet.observe).toHaveBeenCalledTimes(1);
        render(react_1.default.createElement(react_1.default.Fragment, null));
        expect(unsubscribe).toHaveBeenCalledTimes(1);
    });
    it('unsubscribe from facets when the parent of a component is unmounted', () => {
        const unsubscribe = jest.fn();
        const facet = {
            get: () => 'text',
            observe: jest.fn().mockReturnValue(unsubscribe),
        };
        render(react_1.default.createElement("div", null,
            react_1.default.createElement("fast-text", { text: facet })));
        expect(facet.observe).toHaveBeenCalledTimes(1);
        expect(unsubscribe).toHaveBeenCalledTimes(0);
        render(react_1.default.createElement(react_1.default.Fragment, null));
        expect(unsubscribe).toHaveBeenCalledTimes(1);
    });
    it('unsubscribes from a facet (via a fast-* component) inserted using insertBefore, when the parent is unmounted', () => {
        const unsubscribe = jest.fn();
        const facet = {
            get: () => 'abc',
            observe: jest.fn().mockReturnValue(unsubscribe),
        };
        const TestComponent = ({ show, facet }) => (react_1.default.createElement("div", null,
            show ? react_1.default.createElement("fast-text", { text: facet }) : null,
            react_1.default.createElement("div", null)));
        render(react_1.default.createElement(TestComponent, { facet: facet }));
        expect(facet.observe).toHaveBeenCalledTimes(0);
        expect(unsubscribe).toHaveBeenCalledTimes(0);
        render(react_1.default.createElement(TestComponent, { facet: facet, show: true }));
        expect(facet.observe).toHaveBeenCalledTimes(1);
        expect(unsubscribe).toHaveBeenCalledTimes(0);
        render(react_1.default.createElement(react_1.default.Fragment, null));
        expect(facet.observe).toHaveBeenCalledTimes(1);
        expect(unsubscribe).toHaveBeenCalledTimes(1);
    });
    it('keeps the subscription of facets when moving in a keyed list', () => {
        const unsubscribeA = jest.fn();
        const facetA = {
            get: () => 'text',
            observe: jest.fn().mockReturnValue(unsubscribeA),
        };
        const unsubscribeB = jest.fn();
        const facetB = {
            get: () => 'text',
            observe: jest.fn().mockReturnValue(unsubscribeB),
        };
        render(react_1.default.createElement("div", null, [react_1.default.createElement("fast-div", { key: 'A', className: facetA }), react_1.default.createElement("fast-div", { key: 'B', className: facetB })]));
        expect(facetA.observe).toHaveBeenCalledTimes(1);
        expect(facetB.observe).toHaveBeenCalledTimes(1);
        render(react_1.default.createElement("div", null, [react_1.default.createElement("fast-div", { key: 'B', className: facetB }), react_1.default.createElement("fast-div", { key: 'A', className: facetA })]));
        expect(facetA.observe).toHaveBeenCalledTimes(1);
        expect(facetB.observe).toHaveBeenCalledTimes(1);
        expect(unsubscribeA).not.toHaveBeenCalled();
        expect(unsubscribeB).not.toHaveBeenCalled();
    });
});
describe('commitUpdate style prop', () => {
    it('subscribes when updating from null', () => {
        var _a;
        const hostConfig = (0, setupHostConfig_1.setupHostConfig)();
        const instance = {
            children: new Set(),
            element: document.createElement('div'),
            styleUnsubscribers: new Map(),
        };
        const oldProps = {
            style: {
                color: undefined,
            },
        };
        const newColorFacet = {
            get: () => 'blue',
            observe: jest.fn(),
        };
        const newProps = {
            style: {
                color: newColorFacet,
            },
        };
        (_a = hostConfig.commitUpdate) === null || _a === void 0 ? void 0 : _a.call(hostConfig, instance, true, 'fast-div', oldProps, newProps, null);
        // Adds a new subscription to the new Facet
        expect(newColorFacet.observe).toHaveBeenCalledTimes(1);
    });
    it('unsubscribes when updating to null', () => {
        var _a;
        const colorUnsubscriber = jest.fn();
        const hostConfig = (0, setupHostConfig_1.setupHostConfig)();
        const instance = {
            children: new Set(),
            element: document.createElement('div'),
            styleUnsubscribers: new Map([['color', colorUnsubscriber]]),
        };
        const oldColorFacet = {
            get: () => 'blue',
            observe: jest.fn(),
        };
        const oldProps = {
            style: {
                color: oldColorFacet,
            },
        };
        const newProps = {
            style: {
                color: undefined,
            },
        };
        (_a = hostConfig.commitUpdate) === null || _a === void 0 ? void 0 : _a.call(hostConfig, instance, true, 'fast-div', oldProps, newProps, null);
        expect(colorUnsubscriber).toHaveBeenCalledTimes(1);
    });
    it('unsubscribes from previous facet when changing to a primitive value', () => {
        var _a;
        const colorUnsubscriber = jest.fn();
        const hostConfig = (0, setupHostConfig_1.setupHostConfig)();
        const instance = {
            children: new Set(),
            element: document.createElement('div'),
            styleUnsubscribers: new Map([['color', colorUnsubscriber]]),
        };
        const oldProps = {
            style: {
                color: (0, core_1.createFacet)({ initialValue: 'blue' }),
            },
        };
        const newProps = {
            style: {
                color: 'yellow',
            },
        };
        (_a = hostConfig.commitUpdate) === null || _a === void 0 ? void 0 : _a.call(hostConfig, instance, true, 'fast-div', oldProps, newProps, null);
        expect(colorUnsubscriber).toHaveBeenCalledTimes(1);
    });
    it('unsubscribes from previous facet when changing to a new facet', () => {
        var _a;
        const colorUnsubscriber = jest.fn();
        const hostConfig = (0, setupHostConfig_1.setupHostConfig)();
        const instance = {
            children: new Set(),
            element: document.createElement('div'),
            styleUnsubscribers: new Map([['color', colorUnsubscriber]]),
        };
        const oldColorFacet = {
            get: () => 'blue',
            observe: jest.fn(),
        };
        const oldProps = {
            style: {
                color: oldColorFacet,
            },
        };
        const newColorFacet = {
            get: () => 'blue',
            observe: jest.fn(),
        };
        const newProps = {
            style: {
                color: newColorFacet,
            },
        };
        (_a = hostConfig.commitUpdate) === null || _a === void 0 ? void 0 : _a.call(hostConfig, instance, true, 'fast-div', oldProps, newProps, null);
        // Unsubscribes from the old subscription, since it is a new Facet
        expect(colorUnsubscriber).toHaveBeenCalledTimes(1);
        // Adds a new subscription to the new Facet
        expect(newColorFacet.observe).toHaveBeenCalledTimes(1);
    });
    it('keeps the same subscription when updating with the same facet', () => {
        var _a;
        const colorUnsubscriber = jest.fn();
        const hostConfig = (0, setupHostConfig_1.setupHostConfig)();
        const instance = {
            children: new Set(),
            element: document.createElement('div'),
            styleUnsubscribers: new Map([['color', colorUnsubscriber]]),
        };
        const colorFacet = {
            get: () => 'blue',
            observe: jest.fn(),
        };
        const oldProps = {
            style: {
                color: colorFacet,
            },
        };
        const newProps = {
            style: {
                color: colorFacet,
            },
        };
        (_a = hostConfig.commitUpdate) === null || _a === void 0 ? void 0 : _a.call(hostConfig, instance, true, 'fast-div', oldProps, newProps, null);
        // I shouldn't unsubscribe, since it is the same Facet
        expect(colorUnsubscriber).not.toHaveBeenCalled();
        // So I must not also observe again, since I should stick with the previous subscription
        expect(colorFacet.observe).toHaveBeenCalledTimes(0);
    });
});
//# sourceMappingURL=setupHostConfig.spec.js.map