"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setupAttributeUpdate = exports.setupViewBoxUpdate = exports.setupTextUpdate = exports.setupSrcUpdate = exports.setupValueUpdate = exports.setupRowsUpdate = exports.setupMaxLengthUpdate = exports.setupIdUpdate = exports.setupClassUpdate = void 0;
const core_1 = require("@react-facet/core");
const setupClassUpdate = (className, element) => {
    const htmlElement = element;
    if ((0, core_1.isFacet)(className)) {
        return className.observe((className) => {
            htmlElement.className = className !== undefined ? className : '';
        });
    }
    else {
        htmlElement.className = className !== undefined ? className : '';
    }
};
exports.setupClassUpdate = setupClassUpdate;
const setupIdUpdate = (id, element) => {
    if ((0, core_1.isFacet)(id)) {
        return id.observe((id) => {
            element.id = id !== undefined ? id : '';
        });
    }
    else {
        element.id = id !== undefined ? id : '';
    }
};
exports.setupIdUpdate = setupIdUpdate;
const setupMaxLengthUpdate = (maxLength, element) => {
    if ((0, core_1.isFacet)(maxLength)) {
        return maxLength.observe((maxLength) => {
            const textElement = element;
            textElement.maxLength = maxLength !== undefined ? maxLength : Number.MAX_SAFE_INTEGER;
        });
    }
    else {
        const textElement = element;
        textElement.maxLength = maxLength !== undefined ? maxLength : Number.MAX_SAFE_INTEGER;
    }
};
exports.setupMaxLengthUpdate = setupMaxLengthUpdate;
const setupRowsUpdate = (rows, element) => {
    if ((0, core_1.isFacet)(rows)) {
        return rows.observe((rows) => {
            const textElement = element;
            textElement.rows = rows !== undefined ? rows : Number.MAX_SAFE_INTEGER;
        });
    }
    else {
        const textElement = element;
        textElement.rows = rows !== undefined ? rows : Number.MAX_SAFE_INTEGER;
    }
};
exports.setupRowsUpdate = setupRowsUpdate;
/**
 * The value attribute seems to behave differently to other
 * attributes. When using `setAttribute`, browsers and gameface
 * don't always update the element to have what's in the value,
 * so we need to set the `value` attribute directly to solve this.
 * ref: https://github.com/facebook/react/blob/master/packages/react-dom/src/client/ReactDOMInput.js
 */
const updateValue = (element, value) => {
    const inputElement = element;
    // Only accept numerical characters if the input type is number
    if (inputElement.type === 'number' && isNaN(Number(value)))
        return;
    if (value !== undefined) {
        inputElement.value = value;
        inputElement.setAttribute('value', value);
    }
    else {
        inputElement.value = '';
        inputElement.removeAttribute('value');
    }
};
const setupValueUpdate = (value, element) => {
    if ((0, core_1.isFacet)(value)) {
        return value.observe((value) => updateValue(element, value));
    }
    else {
        updateValue(element, value);
    }
};
exports.setupValueUpdate = setupValueUpdate;
const setupSrcUpdate = (src, element) => {
    if ((0, core_1.isFacet)(src)) {
        return src.observe((src) => {
            const textElement = element;
            textElement.src = src !== undefined ? src : '';
        });
    }
    else {
        const textElement = element;
        textElement.src = src !== undefined ? src : '';
    }
};
exports.setupSrcUpdate = setupSrcUpdate;
const setupTextUpdate = (text, element) => {
    if ((0, core_1.isFacet)(text)) {
        return text.observe((text) => {
            const textElement = element;
            textElement.nodeValue = (text !== undefined ? text : '');
        });
    }
    else {
        const textElement = element;
        textElement.nodeValue = (text !== undefined ? text : '');
    }
};
exports.setupTextUpdate = setupTextUpdate;
/**
 * removeAttribute and setAttribute automatically convert the attribute name to lower case.
 * The DOM attribute viewBox is camel cased so setAttributeNS and removeAttributeNS are used
 */
const setupViewBoxUpdate = (viewBox, element) => {
    if ((0, core_1.isFacet)(viewBox)) {
        return viewBox.observe((value) => {
            if (value !== undefined) {
                element.setAttributeNS(null, 'viewBox', value);
            }
            else {
                element.removeAttributeNS(null, 'viewBox');
            }
        });
    }
    else {
        if (viewBox !== undefined) {
            element.setAttributeNS(null, 'viewBox', viewBox);
        }
        else {
            element.removeAttributeNS(null, 'viewBox');
        }
    }
};
exports.setupViewBoxUpdate = setupViewBoxUpdate;
const setupAttributeUpdate = (attribute, value, element) => {
    if ((0, core_1.isFacet)(value)) {
        return value.observe((value) => {
            if (value === true) {
                element.setAttribute(attribute, '');
            }
            else if (value === false) {
                element.removeAttribute(attribute);
            }
            else if (value !== undefined) {
                element.setAttribute(attribute, value);
            }
            else {
                element.removeAttribute(attribute);
            }
        });
    }
    else {
        if (value === true) {
            element.setAttribute(attribute, '');
        }
        else if (value === false) {
            element.removeAttribute(attribute);
        }
        else if (value !== undefined) {
            element.setAttribute(attribute, value);
        }
        else {
            element.removeAttribute(attribute);
        }
    }
};
exports.setupAttributeUpdate = setupAttributeUpdate;
//# sourceMappingURL=setupAttributes.js.map