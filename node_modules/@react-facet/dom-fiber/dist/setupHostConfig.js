"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setupHostConfig = void 0;
const types_1 = require("./types");
const core_1 = require("@react-facet/core");
const setupAttributes_1 = require("./setupAttributes");
/**
 * Custom React Renderer with support for Facets
 *
 * Based on https://blog.atulr.com/react-custom-renderer-1/
 * For more information check the official docs: https://github.com/facebook/react/tree/main/packages/react-reconciler
 */
const setupHostConfig = () => ({
    isPrimaryRenderer: true,
    supportsMutation: true,
    supportsPersistence: false,
    supportsHydration: false,
    now: Date.now,
    /**
     * We need to support setting up the host config in an environment where window is not available globally yet
     * Ex: screenshot testing
     */
    setTimeout: typeof window !== 'undefined'
        ? window.setTimeout
        : (handler, timeout) => window.setTimeout(handler, timeout),
    /**
     * We need to support setting up the host config in an environment where window is not available globally yet
     * Ex: screenshot testing
     */
    clearTimeout: typeof window !== 'undefined' ? window.clearTimeout : (id) => window.clearTimeout(id),
    noTimeout: noop,
    scheduleDeferredCallback: function (callback, options) {
        return window.setTimeout(callback, options ? options.timeout : 0);
    },
    cancelDeferredCallback: function (id) {
        return window.clearTimeout(id);
    },
    getRootHostContext: function () {
        return EMPTY;
    },
    getChildHostContext: function () {
        return EMPTY;
    },
    shouldSetTextContent: function () {
        return false;
    },
    createTextInstance: function (newText) {
        return {
            element: document.createTextNode(newText),
        };
    },
    createInstance: function (externalType, newProps) {
        var _a;
        if (externalType === 'fast-text') {
            const element = document.createTextNode('');
            return {
                children: new Set(),
                element,
                text: (0, setupAttributes_1.setupTextUpdate)(newProps.text, element),
            };
        }
        const typeHTML = (_a = fastTypeMapHTML[externalType]) !== null && _a !== void 0 ? _a : externalType;
        const typeSVG = fastTypeMapSVG[externalType];
        const element = typeSVG !== undefined
            ? document.createElementNS('http://www.w3.org/2000/svg', typeSVG)
            : document.createElement(typeHTML);
        let style;
        let styleUnsubscribers;
        if (newProps.style !== undefined) {
            style = element.style;
            styleUnsubscribers = new Map();
            // We know for sure here that style will never be null (we created it above)
            const notNullStyle = style;
            const notNullStyleUnsubscribers = styleUnsubscribers;
            const styleProp = newProps.style;
            for (const key in styleProp) {
                const value = styleProp[key];
                if (value !== undefined) {
                    if ((0, core_1.isFacet)(value)) {
                        notNullStyleUnsubscribers.set(key, value.observe((value) => {
                            notNullStyle[key] = value;
                        }));
                    }
                    else {
                        notNullStyle[key] = value;
                    }
                }
            }
        }
        if (newProps.dangerouslySetInnerHTML !== undefined) {
            element.innerHTML = newProps.dangerouslySetInnerHTML.__html;
        }
        if (newProps.onClick) {
            element.addEventListener('click', newProps.onClick);
        }
        if (newProps.onFocus) {
            element.addEventListener('focus', newProps.onFocus);
        }
        if (newProps.onBlur) {
            element.addEventListener('blur', newProps.onBlur);
        }
        if (newProps.onMouseDown) {
            element.addEventListener('mousedown', newProps.onMouseDown);
        }
        if (newProps.onMouseMove) {
            element.addEventListener('mousemove', newProps.onMouseMove);
        }
        if (newProps.onMouseUp) {
            element.addEventListener('mouseup', newProps.onMouseUp);
        }
        if (newProps.onTouchStart) {
            element.addEventListener('touchstart', newProps.onTouchStart);
        }
        if (newProps.onTouchMove) {
            element.addEventListener('touchmove', newProps.onTouchMove);
        }
        if (newProps.onTouchEnd) {
            element.addEventListener('touchend', newProps.onTouchEnd);
        }
        if (newProps.onMouseEnter) {
            element.addEventListener('mouseenter', newProps.onMouseEnter);
        }
        if (newProps.onMouseLeave) {
            element.addEventListener('mouseleave', newProps.onMouseLeave);
        }
        if (newProps.onKeyPress) {
            element.addEventListener('keypress', newProps.onKeyPress);
        }
        if (newProps.onKeyDown) {
            element.addEventListener('keydown', newProps.onKeyDown);
        }
        if (newProps.onKeyUp) {
            element.addEventListener('keyup', newProps.onKeyUp);
        }
        return {
            element,
            styleUnsubscribers,
            style,
            children: new Set(),
            className: newProps.className !== undefined ? (0, setupAttributes_1.setupClassUpdate)(newProps.className, element) : undefined,
            id: newProps.id !== undefined ? (0, setupAttributes_1.setupIdUpdate)(newProps.id, element) : undefined,
            autoPlay: newProps.autoPlay !== undefined ? (0, setupAttributes_1.setupAttributeUpdate)('autoplay', newProps.autoPlay, element) : undefined,
            loop: newProps.loop !== undefined ? (0, setupAttributes_1.setupAttributeUpdate)('loop', newProps.loop, element) : undefined,
            href: newProps.href !== undefined ? (0, setupAttributes_1.setupAttributeUpdate)('href', newProps.href, element) : undefined,
            target: newProps.target !== undefined ? (0, setupAttributes_1.setupAttributeUpdate)('target', newProps.target, element) : undefined,
            disabled: newProps.disabled !== undefined ? (0, setupAttributes_1.setupAttributeUpdate)('disabled', newProps.disabled, element) : undefined,
            maxLength: newProps.maxLength !== undefined ? (0, setupAttributes_1.setupMaxLengthUpdate)(newProps.maxLength, element) : undefined,
            rows: newProps.rows !== undefined ? (0, setupAttributes_1.setupRowsUpdate)(newProps.rows, element) : undefined,
            type: newProps.type !== undefined ? (0, setupAttributes_1.setupAttributeUpdate)('type', newProps.type, element) : undefined,
            value: newProps.value !== undefined ? (0, setupAttributes_1.setupValueUpdate)(newProps.value, element) : undefined,
            src: newProps.src !== undefined ? (0, setupAttributes_1.setupSrcUpdate)(newProps.src, element) : undefined,
            d: newProps.d !== undefined ? (0, setupAttributes_1.setupAttributeUpdate)('d', newProps.d, element) : undefined,
            fill: newProps.fill !== undefined ? (0, setupAttributes_1.setupAttributeUpdate)('fill', newProps.fill, element) : undefined,
            height: newProps.height !== undefined ? (0, setupAttributes_1.setupAttributeUpdate)('height', newProps.height, element) : undefined,
            stroke: newProps.stroke !== undefined ? (0, setupAttributes_1.setupAttributeUpdate)('stroke', newProps.stroke, element) : undefined,
            x: newProps.x !== undefined ? (0, setupAttributes_1.setupAttributeUpdate)('x', newProps.x, element) : undefined,
            width: newProps.width !== undefined ? (0, setupAttributes_1.setupAttributeUpdate)('width', newProps.width, element) : undefined,
            y: newProps.y !== undefined ? (0, setupAttributes_1.setupAttributeUpdate)('y', newProps.y, element) : undefined,
            cx: newProps.cx !== undefined ? (0, setupAttributes_1.setupAttributeUpdate)('cx', newProps.cx, element) : undefined,
            cy: newProps.cy !== undefined ? (0, setupAttributes_1.setupAttributeUpdate)('cy', newProps.cy, element) : undefined,
            r: newProps.r !== undefined ? (0, setupAttributes_1.setupAttributeUpdate)('r', newProps.r, element) : undefined,
            rx: newProps.rx !== undefined ? (0, setupAttributes_1.setupAttributeUpdate)('rx', newProps.rx, element) : undefined,
            ry: newProps.ry !== undefined ? (0, setupAttributes_1.setupAttributeUpdate)('ry', newProps.ry, element) : undefined,
            x1: newProps.x1 !== undefined ? (0, setupAttributes_1.setupAttributeUpdate)('x1', newProps.x1, element) : undefined,
            x2: newProps.x2 !== undefined ? (0, setupAttributes_1.setupAttributeUpdate)('x2', newProps.x2, element) : undefined,
            y1: newProps.y1 !== undefined ? (0, setupAttributes_1.setupAttributeUpdate)('y1', newProps.y1, element) : undefined,
            y2: newProps.y2 !== undefined ? (0, setupAttributes_1.setupAttributeUpdate)('y2', newProps.y2, element) : undefined,
            strokeWidth: newProps.strokeWidth !== undefined
                ? (0, setupAttributes_1.setupAttributeUpdate)('stroke-width', newProps.strokeWidth, element)
                : undefined,
            viewBox: newProps.viewBox !== undefined ? (0, setupAttributes_1.setupViewBoxUpdate)(newProps.viewBox, element) : undefined,
            xLinkHref: newProps.xLinkHref !== undefined ? (0, setupAttributes_1.setupAttributeUpdate)('xlink:href', newProps.xLinkHref, element) : undefined,
            fillOpacity: newProps.fillOpacity !== undefined
                ? (0, setupAttributes_1.setupAttributeUpdate)('fill-opacity', newProps.fillOpacity, element)
                : undefined,
            strokeOpacity: newProps.strokeOpacity !== undefined
                ? (0, setupAttributes_1.setupAttributeUpdate)('stroke-opacity', newProps.strokeOpacity, element)
                : undefined,
            strokeLinecap: newProps.strokeLinecap !== undefined
                ? (0, setupAttributes_1.setupAttributeUpdate)('stroke-linecap', newProps.strokeLinecap, element)
                : undefined,
            strokeLinejoin: newProps.strokeLinejoin !== undefined
                ? (0, setupAttributes_1.setupAttributeUpdate)('stroke-linejoin', newProps.strokeLinejoin, element)
                : undefined,
            points: newProps.points !== undefined ? (0, setupAttributes_1.setupAttributeUpdate)('points', newProps.points, element) : undefined,
            offset: newProps.offset !== undefined ? (0, setupAttributes_1.setupAttributeUpdate)('offset', newProps.offset, element) : undefined,
            stopColor: newProps.stopColor !== undefined ? (0, setupAttributes_1.setupAttributeUpdate)('stop-color', newProps.stopColor, element) : undefined,
            stopOpacity: newProps.stopOpacity !== undefined
                ? (0, setupAttributes_1.setupAttributeUpdate)('stop-opacity', newProps.stopOpacity, element)
                : undefined,
            fontFamily: newProps.fontFamily !== undefined
                ? (0, setupAttributes_1.setupAttributeUpdate)('font-family', newProps.fontFamily, element)
                : undefined,
            fontSize: newProps.fontSize !== undefined ? (0, setupAttributes_1.setupAttributeUpdate)('font-size', newProps.fontSize, element) : undefined,
            ['data-droppable']: newProps['data-droppable'] !== undefined
                ? (0, setupAttributes_1.setupAttributeUpdate)('data-droppable', newProps['data-droppable'], element)
                : undefined,
            ['data-narrate']: newProps['data-narrate'] !== undefined
                ? (0, setupAttributes_1.setupAttributeUpdate)('data-narrate', newProps['data-narrate'], element)
                : undefined,
            ['data-narrate-as']: newProps['data-narrate-as'] !== undefined
                ? (0, setupAttributes_1.setupAttributeUpdate)('data-narrate-as', newProps['data-narrate-as'], element)
                : undefined,
            ['data-narrate-before']: newProps['data-narrate-before'] !== undefined
                ? (0, setupAttributes_1.setupAttributeUpdate)('data-narrate-before', newProps['data-narrate-before'], element)
                : undefined,
            ['data-narrate-after']: newProps['data-narrate-after'] !== undefined
                ? (0, setupAttributes_1.setupAttributeUpdate)('data-narrate-after', newProps['data-narrate-after'], element)
                : undefined,
            ['data-testid']: newProps['data-testid'] !== undefined
                ? (0, setupAttributes_1.setupAttributeUpdate)('data-testid', newProps['data-testid'], element)
                : undefined,
            ['data-x-ray']: newProps['data-x-ray'] !== undefined
                ? (0, setupAttributes_1.setupAttributeUpdate)('data-x-ray', newProps['data-x-ray'], element)
                : undefined,
            cohinline: newProps.cohinline !== undefined ? (0, setupAttributes_1.setupAttributeUpdate)('cohinline', newProps.cohinline, element) : undefined,
        };
    },
    finalizeInitialChildren: function () {
        return false;
    },
    prepareForCommit: function () { },
    resetAfterCommit: function () { },
    commitMount: function () { },
    prepareUpdate: function () {
        return true;
    },
    commitUpdate: function (instance, updatePayload, type, oldProps, newProps) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26;
        const { element: uncastElement } = instance;
        if (type === 'fast-text') {
            const textElement = uncastElement;
            if (newProps.text !== oldProps.text) {
                (_a = instance.text) === null || _a === void 0 ? void 0 : _a.call(instance);
                instance.text = (0, setupAttributes_1.setupTextUpdate)(newProps.text, textElement);
            }
            return;
        }
        const element = uncastElement;
        if (newProps.style !== oldProps.style) {
            const style = instance.style || element.style;
            const styleUnsubscribers = instance.styleUnsubscribers || new Map();
            instance.style = style;
            instance.styleUnsubscribers = styleUnsubscribers;
            const notNullStyle = style;
            const oldStyleProp = oldProps.style;
            const newStyleProp = newProps.style;
            if (oldStyleProp !== undefined) {
                for (const key in oldStyleProp) {
                    const oldValue = oldStyleProp[key];
                    const newValue = newStyleProp === null || newStyleProp === void 0 ? void 0 : newStyleProp[key];
                    if (oldValue !== newValue || newStyleProp === undefined) {
                        if ((0, core_1.isFacet)(oldValue)) {
                            (_b = styleUnsubscribers.get(key)) === null || _b === void 0 ? void 0 : _b();
                        }
                    }
                }
            }
            if (newStyleProp !== undefined) {
                for (const key in newStyleProp) {
                    const oldValue = oldStyleProp === null || oldStyleProp === void 0 ? void 0 : oldStyleProp[key];
                    const newValue = newStyleProp[key];
                    if (oldValue !== newValue || oldStyleProp === undefined) {
                        if ((0, core_1.isFacet)(newValue)) {
                            styleUnsubscribers.set(key, newValue.observe((value) => {
                                notNullStyle[key] = value;
                            }));
                        }
                        else {
                            notNullStyle[key] = newValue;
                        }
                    }
                }
            }
        }
        if (newProps.dangerouslySetInnerHTML !== oldProps.dangerouslySetInnerHTML) {
            if (newProps.dangerouslySetInnerHTML !== undefined) {
                element.innerHTML = newProps.dangerouslySetInnerHTML.__html;
            }
            else {
                element.innerHTML = '';
            }
        }
        if (newProps.autoPlay !== oldProps.autoPlay) {
            (_c = instance.autoPlay) === null || _c === void 0 ? void 0 : _c.call(instance);
            if (newProps.autoPlay === undefined) {
                element.removeAttribute('autoplay');
            }
            else {
                instance.autoPlay = (0, setupAttributes_1.setupAttributeUpdate)('autoplay', newProps.autoPlay, element);
            }
        }
        if (newProps.className !== oldProps.className) {
            (_d = instance.className) === null || _d === void 0 ? void 0 : _d.call(instance);
            if (newProps.className === undefined) {
                element.className = '';
            }
            else {
                instance.className = (0, setupAttributes_1.setupClassUpdate)(newProps.className, element);
            }
        }
        if (newProps.d !== oldProps.d) {
            (_e = instance.d) === null || _e === void 0 ? void 0 : _e.call(instance);
            if (newProps.d === undefined) {
                element.removeAttribute('d');
            }
            else {
                instance.d = (0, setupAttributes_1.setupAttributeUpdate)('d', newProps.d, element);
            }
        }
        if (newProps['data-droppable'] !== oldProps['data-droppable']) {
            (_f = instance['data-droppable']) === null || _f === void 0 ? void 0 : _f.call(instance);
            if (newProps['data-droppable'] === undefined) {
                element.removeAttribute('data-droppable');
            }
            else {
                instance['data-droppable'] = (0, setupAttributes_1.setupAttributeUpdate)('data-droppable', newProps['data-droppable'], element);
            }
        }
        if (newProps['data-narrate'] !== oldProps['data-narrate']) {
            (_g = instance['data-narrate']) === null || _g === void 0 ? void 0 : _g.call(instance);
            if (newProps['data-narrate'] === undefined) {
                element.removeAttribute('data-narrate');
            }
            else {
                instance['data-narrate'] = (0, setupAttributes_1.setupAttributeUpdate)('data-narrate', newProps['data-narrate'], element);
            }
        }
        if (newProps['data-narrate-as'] !== oldProps['data-narrate-as']) {
            (_h = instance['data-narrate-as']) === null || _h === void 0 ? void 0 : _h.call(instance);
            if (newProps['data-narrate-as'] === undefined) {
                element.removeAttribute('data-narrate-as');
            }
            else {
                instance['data-narrate-as'] = (0, setupAttributes_1.setupAttributeUpdate)('data-narrate-as', newProps['data-narrate-as'], element);
            }
        }
        if (newProps['data-narrate-after'] !== oldProps['data-narrate-after']) {
            (_j = instance['data-narrate-after']) === null || _j === void 0 ? void 0 : _j.call(instance);
            if (newProps['data-narrate-after'] === undefined) {
                element.removeAttribute('data-narrate-after');
            }
            else {
                instance['data-narrate-after'] = (0, setupAttributes_1.setupAttributeUpdate)('data-narrate-after', newProps['data-narrate-after'], element);
            }
        }
        if (newProps['data-narrate-before'] !== oldProps['data-narrate-before']) {
            (_k = instance['data-narrate-before']) === null || _k === void 0 ? void 0 : _k.call(instance);
            if (newProps['data-narrate-before'] === undefined) {
                element.removeAttribute('data-narrate-before');
            }
            else {
                instance['data-narrate-before'] = (0, setupAttributes_1.setupAttributeUpdate)('data-narrate-before', newProps['data-narrate-before'], element);
            }
        }
        if (newProps['data-testid'] !== oldProps['data-testid']) {
            (_l = instance['data-testid']) === null || _l === void 0 ? void 0 : _l.call(instance);
            if (newProps['data-testid'] === undefined) {
                element.removeAttribute('data-testid');
            }
            else {
                instance['data-testid'] = (0, setupAttributes_1.setupAttributeUpdate)('data-testid', newProps['data-testid'], element);
            }
        }
        if (newProps['data-x-ray'] !== oldProps['data-x-ray']) {
            (_m = instance['data-x-ray']) === null || _m === void 0 ? void 0 : _m.call(instance);
            if (newProps['data-x-ray'] === undefined) {
                element.removeAttribute('data-x-ray');
            }
            else {
                instance['data-x-ray'] = (0, setupAttributes_1.setupAttributeUpdate)('data-x-ray', newProps['data-x-ray'], element);
            }
        }
        if (newProps.fill !== oldProps.fill) {
            (_o = instance.fill) === null || _o === void 0 ? void 0 : _o.call(instance);
            if (newProps.fill === undefined) {
                element.removeAttribute('fill');
            }
            else {
                instance.fill = (0, setupAttributes_1.setupAttributeUpdate)('fill', newProps.fill, element);
            }
        }
        if (newProps.id !== oldProps.id) {
            (_p = instance.id) === null || _p === void 0 ? void 0 : _p.call(instance);
            if (newProps.id === undefined) {
                element.id = '';
            }
            else {
                instance.id = (0, setupAttributes_1.setupIdUpdate)(newProps.id, element);
            }
        }
        if (newProps.loop !== oldProps.loop) {
            (_q = instance.loop) === null || _q === void 0 ? void 0 : _q.call(instance);
            if (newProps.loop === undefined) {
                element.removeAttribute('loop');
            }
            else {
                instance.loop = (0, setupAttributes_1.setupAttributeUpdate)('loop', newProps.loop, element);
            }
        }
        if (newProps.href !== oldProps.href) {
            (_r = instance.href) === null || _r === void 0 ? void 0 : _r.call(instance);
            if (newProps.href === undefined) {
                element.removeAttribute('href');
            }
            else {
                instance.href = (0, setupAttributes_1.setupAttributeUpdate)('href', newProps.href, element);
            }
        }
        if (newProps.target !== oldProps.target) {
            (_s = instance.target) === null || _s === void 0 ? void 0 : _s.call(instance);
            if (newProps.target === undefined) {
                element.removeAttribute('target');
            }
            else {
                instance.target = (0, setupAttributes_1.setupAttributeUpdate)('target', newProps.target, element);
            }
        }
        if (newProps.disabled !== oldProps.disabled) {
            (_t = instance.disabled) === null || _t === void 0 ? void 0 : _t.call(instance);
            if (newProps.disabled === undefined) {
                element.removeAttribute('disabled');
            }
            else {
                instance.disabled = (0, setupAttributes_1.setupAttributeUpdate)('disabled', newProps.disabled, element);
            }
        }
        if (newProps.height !== oldProps.height) {
            (_u = instance.height) === null || _u === void 0 ? void 0 : _u.call(instance);
            if (newProps.height === undefined) {
                element.removeAttribute('height');
            }
            else {
                instance.height = (0, setupAttributes_1.setupAttributeUpdate)('height', newProps.height, element);
            }
        }
        if (newProps.maxLength !== oldProps.maxLength) {
            (_v = instance.maxLength) === null || _v === void 0 ? void 0 : _v.call(instance);
            if (newProps.maxLength === undefined) {
                const textElement = element;
                textElement.removeAttribute('maxlength');
            }
            else {
                instance.maxLength = (0, setupAttributes_1.setupMaxLengthUpdate)(newProps.maxLength, element);
            }
        }
        if (newProps.rows !== oldProps.rows) {
            (_w = instance.rows) === null || _w === void 0 ? void 0 : _w.call(instance);
            if (newProps.rows === undefined) {
                const textElement = element;
                textElement.removeAttribute('rows');
            }
            else {
                instance.rows = (0, setupAttributes_1.setupRowsUpdate)(newProps.rows, element);
            }
        }
        if (newProps.stroke !== oldProps.stroke) {
            (_x = instance.stroke) === null || _x === void 0 ? void 0 : _x.call(instance);
            if (newProps.stroke === undefined) {
                element.removeAttribute('stroke');
            }
            else {
                instance.stroke = (0, setupAttributes_1.setupAttributeUpdate)('stroke', newProps.stroke, element);
            }
        }
        if (newProps.type !== oldProps.type) {
            (_y = instance.type) === null || _y === void 0 ? void 0 : _y.call(instance);
            if (newProps.type === undefined) {
                const textElement = element;
                textElement.removeAttribute('type');
            }
            else {
                instance.type = (0, setupAttributes_1.setupAttributeUpdate)('type', newProps.type, element);
            }
        }
        if (newProps.value !== oldProps.value) {
            (_z = instance.value) === null || _z === void 0 ? void 0 : _z.call(instance);
            if (newProps.value === undefined) {
                const textElement = element;
                textElement.removeAttribute('value');
            }
            else {
                instance.value = (0, setupAttributes_1.setupValueUpdate)(newProps.value, element);
            }
        }
        if (newProps.x !== oldProps.x) {
            (_0 = instance.x) === null || _0 === void 0 ? void 0 : _0.call(instance);
            if (newProps.x === undefined) {
                element.removeAttribute('x');
            }
            else {
                instance.x = (0, setupAttributes_1.setupAttributeUpdate)('x', newProps.x, element);
            }
        }
        if (newProps.width !== oldProps.width) {
            (_1 = instance.width) === null || _1 === void 0 ? void 0 : _1.call(instance);
            if (newProps.width === undefined) {
                element.removeAttribute('width');
            }
            else {
                instance.width = (0, setupAttributes_1.setupAttributeUpdate)('width', newProps.width, element);
            }
        }
        if (newProps.y !== oldProps.y) {
            (_2 = instance.y) === null || _2 === void 0 ? void 0 : _2.call(instance);
            if (newProps.y === undefined) {
                element.removeAttribute('y');
            }
            else {
                instance.y = (0, setupAttributes_1.setupAttributeUpdate)('y', newProps.y, element);
            }
        }
        if (newProps.cx !== oldProps.cx) {
            (_3 = instance.cx) === null || _3 === void 0 ? void 0 : _3.call(instance);
            if (newProps.cx === undefined) {
                element.removeAttribute('cx');
            }
            else {
                instance.cx = (0, setupAttributes_1.setupAttributeUpdate)('cx', newProps.cx, element);
            }
        }
        if (newProps.r !== oldProps.r) {
            (_4 = instance.r) === null || _4 === void 0 ? void 0 : _4.call(instance);
            if (newProps.r === undefined) {
                element.removeAttribute('r');
            }
            else {
                instance.r = (0, setupAttributes_1.setupAttributeUpdate)('r', newProps.r, element);
            }
        }
        if (newProps.cy !== oldProps.cy) {
            (_5 = instance.cy) === null || _5 === void 0 ? void 0 : _5.call(instance);
            if (newProps.cy === undefined) {
                element.removeAttribute('cy');
            }
            else {
                instance.cy = (0, setupAttributes_1.setupAttributeUpdate)('cy', newProps.cy, element);
            }
        }
        if (newProps.rx !== oldProps.rx) {
            (_6 = instance.rx) === null || _6 === void 0 ? void 0 : _6.call(instance);
            if (newProps.rx === undefined) {
                element.removeAttribute('rx');
            }
            else {
                instance.rx = (0, setupAttributes_1.setupAttributeUpdate)('rx', newProps.rx, element);
            }
        }
        if (newProps.ry !== oldProps.ry) {
            (_7 = instance.ry) === null || _7 === void 0 ? void 0 : _7.call(instance);
            if (newProps.ry === undefined) {
                element.removeAttribute('ry');
            }
            else {
                instance.ry = (0, setupAttributes_1.setupAttributeUpdate)('ry', newProps.ry, element);
            }
        }
        if (newProps.x1 !== oldProps.x1) {
            (_8 = instance.x1) === null || _8 === void 0 ? void 0 : _8.call(instance);
            if (newProps.x1 === undefined) {
                element.removeAttribute('x1');
            }
            else {
                instance.x1 = (0, setupAttributes_1.setupAttributeUpdate)('x1', newProps.x1, element);
            }
        }
        if (newProps.x2 !== oldProps.x2) {
            (_9 = instance.x2) === null || _9 === void 0 ? void 0 : _9.call(instance);
            if (newProps.x2 === undefined) {
                element.removeAttribute('x2');
            }
            else {
                instance.x2 = (0, setupAttributes_1.setupAttributeUpdate)('x2', newProps.x2, element);
            }
        }
        if (newProps.y1 !== oldProps.y1) {
            (_10 = instance.y1) === null || _10 === void 0 ? void 0 : _10.call(instance);
            if (newProps.y1 === undefined) {
                element.removeAttribute('y1');
            }
            else {
                instance.y1 = (0, setupAttributes_1.setupAttributeUpdate)('y1', newProps.y1, element);
            }
        }
        if (newProps.y2 !== oldProps.y2) {
            (_11 = instance.y2) === null || _11 === void 0 ? void 0 : _11.call(instance);
            if (newProps.y2 === undefined) {
                element.removeAttribute('y2');
            }
            else {
                instance.y2 = (0, setupAttributes_1.setupAttributeUpdate)('y2', newProps.y2, element);
            }
        }
        if (newProps.strokeWidth !== oldProps.strokeWidth) {
            (_12 = instance.strokeWidth) === null || _12 === void 0 ? void 0 : _12.call(instance);
            if (newProps.strokeWidth === undefined) {
                element.removeAttribute('strokeWidth');
            }
            else {
                instance.strokeWidth = (0, setupAttributes_1.setupAttributeUpdate)('stroke-width', newProps.strokeWidth, element);
            }
        }
        if (newProps.viewBox !== oldProps.viewBox) {
            (_13 = instance.viewBox) === null || _13 === void 0 ? void 0 : _13.call(instance);
            if (newProps.viewBox === undefined) {
                element.removeAttribute('viewBox');
            }
            else {
                instance.viewBox = (0, setupAttributes_1.setupViewBoxUpdate)(newProps.viewBox, element);
            }
        }
        if (newProps.xLinkHref !== oldProps.xLinkHref) {
            (_14 = instance.xLinkHref) === null || _14 === void 0 ? void 0 : _14.call(instance);
            if (newProps.xLinkHref === undefined) {
                element.removeAttribute('xlink:href');
            }
            else {
                instance.xLinkHref = (0, setupAttributes_1.setupAttributeUpdate)('xlink:href', newProps.xLinkHref, element);
            }
        }
        if (newProps.fillOpacity !== oldProps.fillOpacity) {
            (_15 = instance.fillOpacity) === null || _15 === void 0 ? void 0 : _15.call(instance);
            if (newProps.fillOpacity === undefined) {
                element.removeAttribute('fill-opacity');
            }
            else {
                instance.fillOpacity = (0, setupAttributes_1.setupAttributeUpdate)('fill-opacity', newProps.fillOpacity, element);
            }
        }
        if (newProps.strokeOpacity !== oldProps.strokeOpacity) {
            (_16 = instance.strokeOpacity) === null || _16 === void 0 ? void 0 : _16.call(instance);
            if (newProps.strokeOpacity === undefined) {
                element.removeAttribute('stroke-opacity');
            }
            else {
                instance.strokeOpacity = (0, setupAttributes_1.setupAttributeUpdate)('stroke-opacity', newProps.strokeOpacity, element);
            }
        }
        if (newProps.strokeLinecap !== oldProps.strokeLinecap) {
            (_17 = instance.strokeLinecap) === null || _17 === void 0 ? void 0 : _17.call(instance);
            if (newProps.strokeLinecap === undefined) {
                element.removeAttribute('stroke-linecap');
            }
            else {
                instance.strokeLinecap = (0, setupAttributes_1.setupAttributeUpdate)('stroke-linecap', newProps.strokeLinecap, element);
            }
        }
        if (newProps.strokeLinejoin !== oldProps.strokeLinejoin) {
            (_18 = instance.strokeLinejoin) === null || _18 === void 0 ? void 0 : _18.call(instance);
            if (newProps.strokeLinejoin === undefined) {
                element.removeAttribute('stroke-linejoin');
            }
            else {
                instance.strokeLinejoin = (0, setupAttributes_1.setupAttributeUpdate)('stroke-linejoin', newProps.strokeLinejoin, element);
            }
        }
        if (newProps.points !== oldProps.points) {
            (_19 = instance.points) === null || _19 === void 0 ? void 0 : _19.call(instance);
            if (newProps.points === undefined) {
                element.removeAttribute('points');
            }
            else {
                instance.points = (0, setupAttributes_1.setupAttributeUpdate)('points', newProps.points, element);
            }
        }
        if (newProps.offset !== oldProps.offset) {
            (_20 = instance.offset) === null || _20 === void 0 ? void 0 : _20.call(instance);
            if (newProps.offset === undefined) {
                element.removeAttribute('offset');
            }
            else {
                instance.offset = (0, setupAttributes_1.setupAttributeUpdate)('offset', newProps.offset, element);
            }
        }
        if (newProps.stopColor !== oldProps.stopColor) {
            (_21 = instance.stopColor) === null || _21 === void 0 ? void 0 : _21.call(instance);
            if (newProps.stopColor === undefined) {
                element.removeAttribute('stop-color');
            }
            else {
                instance.stopColor = (0, setupAttributes_1.setupAttributeUpdate)('stop-color', newProps.stopColor, element);
            }
        }
        if (newProps.stopOpacity !== oldProps.stopOpacity) {
            (_22 = instance.stopOpacity) === null || _22 === void 0 ? void 0 : _22.call(instance);
            if (newProps.stopOpacity === undefined) {
                element.removeAttribute('stop-opacity');
            }
            else {
                instance.stopOpacity = (0, setupAttributes_1.setupAttributeUpdate)('stop-opacity', newProps.stopOpacity, element);
            }
        }
        if (newProps.fontFamily !== oldProps.fontFamily) {
            (_23 = instance.fontFamily) === null || _23 === void 0 ? void 0 : _23.call(instance);
            if (newProps.fontFamily === undefined) {
                element.removeAttribute('font-family');
            }
            else {
                instance.fontFamily = (0, setupAttributes_1.setupAttributeUpdate)('font-family', newProps.fontFamily, element);
            }
        }
        if (newProps.fontSize !== oldProps.fontSize) {
            (_24 = instance.fontSize) === null || _24 === void 0 ? void 0 : _24.call(instance);
            if (newProps.fontSize === undefined) {
                element.removeAttribute('font-size');
            }
            else {
                instance.fontSize = (0, setupAttributes_1.setupAttributeUpdate)('font-size', newProps.fontSize, element);
            }
        }
        if (newProps.src !== oldProps.src) {
            (_25 = instance.src) === null || _25 === void 0 ? void 0 : _25.call(instance);
            if (newProps.src === undefined) {
                const textElement = element;
                textElement.removeAttribute('src');
            }
            else {
                instance.src = (0, setupAttributes_1.setupSrcUpdate)(newProps.src, element);
            }
        }
        if (newProps.cohinline !== oldProps.cohinline) {
            (_26 = instance.cohinline) === null || _26 === void 0 ? void 0 : _26.call(instance);
            if (newProps.cohinline === undefined) {
                element.removeAttribute('cohinline');
            }
            else {
                instance.cohinline = (0, setupAttributes_1.setupAttributeUpdate)('cohinline', newProps.cohinline, element);
            }
        }
        if (newProps.onClick !== oldProps.onClick) {
            if (oldProps.onClick)
                element.removeEventListener('click', oldProps.onClick);
            if (newProps.onClick)
                element.addEventListener('click', newProps.onClick);
        }
        if (newProps.onFocus !== oldProps.onFocus) {
            if (oldProps.onFocus)
                element.removeEventListener('focus', oldProps.onFocus);
            if (newProps.onFocus)
                element.addEventListener('focus', newProps.onFocus);
        }
        if (newProps.onBlur !== oldProps.onBlur) {
            if (oldProps.onBlur)
                element.removeEventListener('blur', oldProps.onBlur);
            if (newProps.onBlur)
                element.addEventListener('blur', newProps.onBlur);
        }
        if (newProps.onMouseDown !== oldProps.onMouseDown) {
            if (oldProps.onMouseDown)
                element.removeEventListener('mousedown', oldProps.onMouseDown);
            if (newProps.onMouseDown)
                element.addEventListener('mousedown', newProps.onMouseDown);
        }
        if (newProps.onMouseMove !== oldProps.onMouseMove) {
            if (oldProps.onMouseMove)
                element.removeEventListener('mousemove', oldProps.onMouseMove);
            if (newProps.onMouseMove)
                element.addEventListener('mousemove', newProps.onMouseMove);
        }
        if (newProps.onMouseEnter !== oldProps.onMouseEnter) {
            if (oldProps.onMouseEnter)
                element.removeEventListener('mouseenter', oldProps.onMouseEnter);
            if (newProps.onMouseEnter)
                element.addEventListener('mouseenter', newProps.onMouseEnter);
        }
        if (newProps.onMouseLeave !== oldProps.onMouseLeave) {
            if (oldProps.onMouseLeave)
                element.removeEventListener('mouseleave', oldProps.onMouseLeave);
            if (newProps.onMouseLeave)
                element.addEventListener('mouseleave', newProps.onMouseLeave);
        }
        if (newProps.onMouseUp !== oldProps.onMouseUp) {
            if (oldProps.onMouseUp)
                element.removeEventListener('mouseup', oldProps.onMouseUp);
            if (newProps.onMouseUp)
                element.addEventListener('mouseup', newProps.onMouseUp);
        }
        if (newProps.onTouchStart !== oldProps.onTouchStart) {
            if (oldProps.onTouchStart)
                element.removeEventListener('touchstart', oldProps.onTouchStart);
            if (newProps.onTouchStart)
                element.addEventListener('touchstart', newProps.onTouchStart);
        }
        if (newProps.onTouchMove !== oldProps.onTouchMove) {
            if (oldProps.onTouchMove)
                element.removeEventListener('touchmove', oldProps.onTouchMove);
            if (newProps.onTouchMove)
                element.addEventListener('touchmove', newProps.onTouchMove);
        }
        if (newProps.onTouchEnd !== oldProps.onTouchEnd) {
            if (oldProps.onTouchEnd)
                element.removeEventListener('touchend', oldProps.onTouchEnd);
            if (newProps.onTouchEnd)
                element.addEventListener('touchend', newProps.onTouchEnd);
        }
        if (newProps.onTouchMove !== oldProps.onTouchMove) {
            if (oldProps.onTouchMove)
                element.removeEventListener('touchmove', oldProps.onTouchMove);
            if (newProps.onTouchMove)
                element.addEventListener('touchmove', newProps.onTouchMove);
        }
        if (newProps.onTouchEnd !== oldProps.onTouchEnd) {
            if (oldProps.onTouchEnd)
                element.removeEventListener('touchend', oldProps.onTouchEnd);
            if (newProps.onTouchEnd)
                element.addEventListener('touchend', newProps.onTouchEnd);
        }
        if (newProps.onKeyPress !== oldProps.onKeyPress) {
            if (oldProps.onKeyPress)
                element.removeEventListener('keypress', oldProps.onKeyPress);
            if (newProps.onKeyPress)
                element.addEventListener('keypress', newProps.onKeyPress);
        }
        if (newProps.onKeyDown !== oldProps.onKeyDown) {
            if (oldProps.onKeyDown)
                element.removeEventListener('keydown', oldProps.onKeyDown);
            if (newProps.onKeyDown)
                element.addEventListener('keydown', newProps.onKeyDown);
        }
        if (newProps.onKeyUp !== oldProps.onKeyUp) {
            if (oldProps.onKeyUp)
                element.removeEventListener('keyup', oldProps.onKeyUp);
            if (newProps.onKeyUp)
                element.addEventListener('keyup', newProps.onKeyUp);
        }
    },
    commitTextUpdate: function (textInstance, oldText, newText) {
        textInstance.element.nodeValue = newText;
    },
    appendInitialChild: function (parent, child) {
        if ((0, types_1.isElementContainer)(child)) {
            parent.children.add(child);
        }
        parent.element.appendChild(child.element);
    },
    appendChildToContainer: function (parent, child) {
        if ((0, types_1.isElementContainer)(child)) {
            parent.children.add(child);
        }
        parent.element.appendChild(child.element);
    },
    appendChild: function (parentInstance, child) {
        if ((0, types_1.isElementContainer)(child)) {
            parentInstance.children.add(child);
        }
        parentInstance.element.appendChild(child.element);
    },
    insertBefore: function (parentInstance, child, beforeChild) {
        if ((0, types_1.isElementContainer)(child)) {
            parentInstance.children.add(child);
        }
        parentInstance.element.insertBefore(child.element, beforeChild.element);
    },
    removeChild: function (parentInstance, child) {
        if ((0, types_1.isElementContainer)(child)) {
            cleanupElementContainer(parentInstance, child);
        }
        parentInstance.element.removeChild(child.element);
    },
    insertInContainerBefore: function (container, child, beforeChild) {
        if ((0, types_1.isElementContainer)(child)) {
            container.children.add(child);
        }
        container.element.insertBefore(child.element, beforeChild.element);
    },
    removeChildFromContainer: function (container, child) {
        if ((0, types_1.isElementContainer)(child)) {
            cleanupElementContainer(container, child);
        }
        container.element.removeChild(child.element);
    },
    resetTextContent: function (instance) {
        instance.element.textContent = '';
    },
    shouldDeprioritizeSubtree: function () {
        return false;
    },
    getPublicInstance: function (instance) {
        return instance.element;
    },
});
exports.setupHostConfig = setupHostConfig;
const cleanupElementContainer = (parent, instance) => {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27;
    parent.children.delete(instance);
    (_a = instance.styleUnsubscribers) === null || _a === void 0 ? void 0 : _a.forEach((unsubscribe) => unsubscribe());
    (_b = instance.styleUnsubscribers) === null || _b === void 0 ? void 0 : _b.clear();
    instance.children.forEach(cleanupElementContainer);
    instance.children.clear();
    (_c = instance.className) === null || _c === void 0 ? void 0 : _c.call(instance);
    (_d = instance.cx) === null || _d === void 0 ? void 0 : _d.call(instance);
    (_e = instance.cy) === null || _e === void 0 ? void 0 : _e.call(instance);
    (_f = instance.d) === null || _f === void 0 ? void 0 : _f.call(instance);
    (_g = instance['data-droppable']) === null || _g === void 0 ? void 0 : _g.call(instance);
    (_h = instance['data-narrate']) === null || _h === void 0 ? void 0 : _h.call(instance);
    (_j = instance['data-narrate-as']) === null || _j === void 0 ? void 0 : _j.call(instance);
    (_k = instance['data-narrate-after']) === null || _k === void 0 ? void 0 : _k.call(instance);
    (_l = instance['data-narrate-before']) === null || _l === void 0 ? void 0 : _l.call(instance);
    (_m = instance['data-testid']) === null || _m === void 0 ? void 0 : _m.call(instance);
    (_o = instance['data-x-ray']) === null || _o === void 0 ? void 0 : _o.call(instance);
    (_p = instance.fill) === null || _p === void 0 ? void 0 : _p.call(instance);
    (_q = instance.id) === null || _q === void 0 ? void 0 : _q.call(instance);
    (_r = instance.src) === null || _r === void 0 ? void 0 : _r.call(instance);
    (_s = instance.height) === null || _s === void 0 ? void 0 : _s.call(instance);
    (_t = instance.href) === null || _t === void 0 ? void 0 : _t.call(instance);
    (_u = instance.target) === null || _u === void 0 ? void 0 : _u.call(instance);
    (_v = instance.autoPlay) === null || _v === void 0 ? void 0 : _v.call(instance);
    (_w = instance.loop) === null || _w === void 0 ? void 0 : _w.call(instance);
    (_x = instance.disabled) === null || _x === void 0 ? void 0 : _x.call(instance);
    (_y = instance.maxLength) === null || _y === void 0 ? void 0 : _y.call(instance);
    (_z = instance.r) === null || _z === void 0 ? void 0 : _z.call(instance);
    (_0 = instance.rx) === null || _0 === void 0 ? void 0 : _0.call(instance);
    (_1 = instance.ry) === null || _1 === void 0 ? void 0 : _1.call(instance);
    (_2 = instance.rows) === null || _2 === void 0 ? void 0 : _2.call(instance);
    (_3 = instance.stroke) === null || _3 === void 0 ? void 0 : _3.call(instance);
    (_4 = instance.strokeWidth) === null || _4 === void 0 ? void 0 : _4.call(instance);
    (_5 = instance.type) === null || _5 === void 0 ? void 0 : _5.call(instance);
    (_6 = instance.text) === null || _6 === void 0 ? void 0 : _6.call(instance);
    (_7 = instance.value) === null || _7 === void 0 ? void 0 : _7.call(instance);
    (_8 = instance.x) === null || _8 === void 0 ? void 0 : _8.call(instance);
    (_9 = instance.x1) === null || _9 === void 0 ? void 0 : _9.call(instance);
    (_10 = instance.x2) === null || _10 === void 0 ? void 0 : _10.call(instance);
    (_11 = instance.width) === null || _11 === void 0 ? void 0 : _11.call(instance);
    (_12 = instance.y) === null || _12 === void 0 ? void 0 : _12.call(instance);
    (_13 = instance.y1) === null || _13 === void 0 ? void 0 : _13.call(instance);
    (_14 = instance.y2) === null || _14 === void 0 ? void 0 : _14.call(instance);
    (_15 = instance.viewBox) === null || _15 === void 0 ? void 0 : _15.call(instance);
    (_16 = instance.xLinkHref) === null || _16 === void 0 ? void 0 : _16.call(instance);
    (_17 = instance.fillOpacity) === null || _17 === void 0 ? void 0 : _17.call(instance);
    (_18 = instance.strokeOpacity) === null || _18 === void 0 ? void 0 : _18.call(instance);
    (_19 = instance.strokeLinecap) === null || _19 === void 0 ? void 0 : _19.call(instance);
    (_20 = instance.strokeLinejoin) === null || _20 === void 0 ? void 0 : _20.call(instance);
    (_21 = instance.points) === null || _21 === void 0 ? void 0 : _21.call(instance);
    (_22 = instance.offset) === null || _22 === void 0 ? void 0 : _22.call(instance);
    (_23 = instance.stopColor) === null || _23 === void 0 ? void 0 : _23.call(instance);
    (_24 = instance.stopOpacity) === null || _24 === void 0 ? void 0 : _24.call(instance);
    (_25 = instance.fontFamily) === null || _25 === void 0 ? void 0 : _25.call(instance);
    (_26 = instance.fontSize) === null || _26 === void 0 ? void 0 : _26.call(instance);
    (_27 = instance.cohinline) === null || _27 === void 0 ? void 0 : _27.call(instance);
};
const noop = () => { };
const EMPTY = {};
const fastTypeMapHTML = {
    'fast-a': 'a',
    'fast-div': 'div',
    'fast-p': 'p',
    'fast-img': 'img',
    'fast-input': 'input',
    'fast-span': 'span',
    'fast-textarea': 'textarea',
    'fast-text': 'span',
    a: 'a',
    div: 'div',
    p: 'p',
    img: 'img',
    textarea: 'textarea',
    input: 'input',
    style: 'style',
};
const fastTypeMapSVG = {
    'fast-circle': 'circle',
    'fast-ellipse': 'ellipse',
    'fast-line': 'line',
    'fast-path': 'path',
    'fast-rect': 'rect',
    'fast-svg': 'svg',
    'fast-foreignObject': 'foreignObject',
    'fast-use': 'use',
    'fast-polyline': 'polyline',
    'fast-polygon': 'polygon',
    'fast-linearGradient': 'linearGradient',
    'fast-radialGradient': 'radialGradient',
    'fast-stop': 'stop',
    'fast-svg-text': 'text',
    'fast-pattern': 'pattern',
    circle: 'circle',
    ellipse: 'ellipse',
    line: 'line',
    path: 'path',
    rect: 'rect',
    svg: 'svg',
    foreignObject: 'foreignObject',
    symbol: 'symbol',
    g: 'g',
    use: 'use',
    defs: 'defs',
    polyline: 'polyline',
    polygon: 'polygon',
    linearGradient: 'linearGradient',
    radialGradient: 'radialGradient',
    stop: 'stop',
    text: 'text',
    pattern: 'pattern',
};
//# sourceMappingURL=setupHostConfig.js.map