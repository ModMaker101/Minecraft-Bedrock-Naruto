import { FacetProp, Unsubscribe } from '@react-facet/core';
import { FiberRoot, Reconciler } from 'react-reconciler';
import { Key, MutableRefObject, ReactText } from 'react';
export declare type FacetFiberRoot = FiberRoot;
export declare type TypeHTML = 'fast-a' | 'fast-div' | 'fast-span' | 'fast-p' | 'fast-img' | 'fast-textarea' | 'fast-input' | 'fast-text' | 'a' | 'div' | 'p' | 'img' | 'textarea' | 'input' | 'style';
export declare type TypeSVG = 'fast-circle' | 'fast-ellipse' | 'fast-line' | 'fast-path' | 'fast-rect' | 'fast-svg' | 'fast-foreignObject' | 'fast-use' | 'fast-polyline' | 'fast-polygon' | 'fast-linearGradient' | 'fast-radialGradient' | 'fast-stop' | 'fast-svg-text' | 'fast-pattern' | 'circle' | 'ellipse' | 'line' | 'path' | 'rect' | 'svg' | 'defs' | 'g' | 'symbol' | 'use' | 'polyline' | 'polygon' | 'linearGradient' | 'radialGradient' | 'foreignObject' | 'stop' | 'text' | 'pattern';
export declare type Type = TypeHTML | TypeSVG;
export declare type InputType = 'text' | 'button' | 'password' | 'checkbox' | 'radio' | 'number';
export interface Style {
    [key: string]: FacetProp<string | number | undefined>;
}
export interface Callback {
    (): void;
}
export interface NoTimeout {
    (): void;
}
export declare type FocusCallback = (e: FocusEvent) => void;
export declare type TouchCallback = (e: TouchEvent) => void;
export declare type MouseCallback = (event: MouseEvent) => void;
export interface PointerEvents {
    onClick?: MouseCallback;
    onMouseDown?: MouseCallback;
    onMouseMove?: MouseCallback;
    onMouseUp?: MouseCallback;
    onTouchStart?: TouchCallback;
    onTouchMove?: TouchCallback;
    onTouchEnd?: TouchCallback;
    onMouseEnter?: MouseCallback;
    onMouseLeave?: MouseCallback;
}
export interface FocusEvents {
    onFocus?: FocusCallback;
    onBlur?: FocusCallback;
}
export declare type KeyboardCallback = (event: KeyboardEvent) => void;
export interface KeyboardEvents {
    onKeyPress?: KeyboardCallback;
    onKeyDown?: KeyboardCallback;
    onKeyUp?: KeyboardCallback;
}
interface StrictReactElement<P = unknown, T extends string = string> {
    type: T;
    props: P;
    key: Key | null;
}
/**
 * More strict type than default React.ReactNode
 *
 * It prevents passing a function as a Node. This allow us to catch accidental passing of facets as children.
 */
export declare type StrictReactNode = StrictReactElement | ReactText | Array<StrictReactNode> | boolean | null | undefined;
export declare type ElementProps<T> = PointerEvents & FocusEvents & KeyboardEvents & {
    key?: string | number;
    /**
     * More strict children that doesn't support passing facets
     */
    children?: StrictReactNode;
    style?: Style;
    ref?: React.Ref<T>;
    dangerouslySetInnerHTML?: {
        __html: string;
    };
    className?: FacetProp<string | undefined>;
    cx?: FacetProp<string | undefined>;
    cy?: FacetProp<string | undefined>;
    d?: FacetProp<string | undefined>;
    ['data-narrate']?: FacetProp<string | boolean | undefined>;
    ['data-narrate-as']?: FacetProp<string>;
    ['data-narrate-before']?: FacetProp<string>;
    ['data-narrate-after']?: FacetProp<string>;
    ['data-droppable']?: FacetProp<boolean | undefined>;
    ['data-testid']?: FacetProp<string | undefined>;
    ['data-x-ray']?: FacetProp<boolean | undefined>;
    fill?: FacetProp<string | undefined>;
    id?: FacetProp<string | undefined>;
    src?: FacetProp<string | undefined>;
    height?: FacetProp<string | undefined>;
    href?: FacetProp<string | undefined>;
    target?: FacetProp<string | undefined>;
    autoPlay?: FacetProp<boolean | undefined>;
    loop?: FacetProp<boolean | undefined>;
    disabled?: FacetProp<boolean | undefined>;
    maxLength?: FacetProp<number | undefined>;
    r?: FacetProp<string | undefined>;
    rx?: FacetProp<string | undefined>;
    ry?: FacetProp<string | undefined>;
    rows?: FacetProp<number | undefined>;
    stroke?: FacetProp<string | undefined>;
    strokeWidth?: FacetProp<string | undefined>;
    type?: FacetProp<InputType | undefined>;
    value?: FacetProp<string | undefined>;
    x?: FacetProp<string | undefined>;
    x1?: FacetProp<string | undefined>;
    x2?: FacetProp<string | undefined>;
    width?: FacetProp<string | undefined>;
    y?: FacetProp<string | undefined>;
    y1?: FacetProp<string | undefined>;
    y2?: FacetProp<string | undefined>;
    viewBox?: FacetProp<string | undefined>;
    xLinkHref?: FacetProp<string | undefined>;
    fillOpacity?: FacetProp<string | undefined>;
    strokeOpacity?: FacetProp<string | undefined>;
    strokeLinecap?: FacetProp<string | undefined>;
    strokeLinejoin?: FacetProp<string | undefined>;
    points?: FacetProp<string | undefined>;
    offset?: FacetProp<string | undefined>;
    stopColor?: FacetProp<string | undefined>;
    stopOpacity?: FacetProp<string | undefined>;
    fontFamily?: FacetProp<string | undefined>;
    fontSize?: FacetProp<string | undefined>;
    /**
     * Support for Gameface's Experimental inline layout for paragraph elements
     * More info: https://docs.coherent-labs.com/cpp-gameface/what_is_gfp/htmlfeaturesupport/#experimental-inline-layout-for-paragraph-elements
     */
    cohinline?: FacetProp<boolean | undefined>;
};
export declare type TextProps = {
    text: FacetProp<string | number>;
};
export declare type Props<T> = ElementProps<T> & TextProps;
export declare type ValidPropsNames = keyof Props<unknown>;
export declare type ElementContainer = {
    children: Set<ElementContainer>;
    element: HTMLElement | SVGElement | Text;
    style?: CSSStyleDeclaration;
    styleUnsubscribers?: Map<string | number, Unsubscribe>;
    className?: Unsubscribe;
    cx?: Unsubscribe;
    cy?: Unsubscribe;
    d?: Unsubscribe;
    ['data-droppable']?: Unsubscribe;
    ['data-narrate']?: Unsubscribe;
    ['data-narrate-as']?: Unsubscribe;
    ['data-narrate-after']?: Unsubscribe;
    ['data-narrate-before']?: Unsubscribe;
    ['data-testid']?: Unsubscribe;
    ['data-x-ray']?: Unsubscribe;
    fill?: Unsubscribe;
    id?: Unsubscribe;
    src?: Unsubscribe;
    height?: Unsubscribe;
    href?: Unsubscribe;
    target?: Unsubscribe;
    autoPlay?: Unsubscribe;
    loop?: Unsubscribe;
    disabled?: Unsubscribe;
    maxLength?: Unsubscribe;
    r?: Unsubscribe;
    rx?: Unsubscribe;
    ry?: Unsubscribe;
    rows?: Unsubscribe;
    stroke?: Unsubscribe;
    strokeWidth?: Unsubscribe;
    type?: Unsubscribe;
    text?: Unsubscribe;
    value?: Unsubscribe;
    x?: Unsubscribe;
    x1?: Unsubscribe;
    x2?: Unsubscribe;
    width?: Unsubscribe;
    y?: Unsubscribe;
    y1?: Unsubscribe;
    y2?: Unsubscribe;
    viewBox?: Unsubscribe;
    xLinkHref?: Unsubscribe;
    fillOpacity?: Unsubscribe;
    strokeOpacity?: Unsubscribe;
    strokeLinecap?: Unsubscribe;
    strokeLinejoin?: Unsubscribe;
    points?: Unsubscribe;
    offset?: Unsubscribe;
    stopColor?: Unsubscribe;
    stopOpacity?: Unsubscribe;
    fontFamily?: Unsubscribe;
    fontSize?: Unsubscribe;
    cohinline?: Unsubscribe;
};
export declare const isElementContainer: (value: ElementContainer | TextContainer) => value is ElementContainer;
export declare type TextContainer = {
    element: Text;
};
export declare type Instance = ElementContainer;
export declare type Container = Instance;
export declare type TextInstance = TextContainer;
export declare type HydratableInstance = Instance;
export declare type PublicInstance = HTMLElement | SVGElement | Text;
export declare type ReactFacetReconciler = Reconciler<Instance, TextInstance, Container, PublicInstance> & {
    flushPassiveEffects: () => boolean;
    IsThisRendererActing: MutableRefObject<boolean>;
};
export interface HostContext {
    type?: Type;
}
export declare type UpdatePayload = boolean;
export declare type FastAProps = ElementProps<HTMLAnchorElement>;
export declare type FastCircleProps = ElementProps<SVGCircleElement>;
export declare type FastDivProps = ElementProps<HTMLDivElement>;
export declare type FastEllipseProps = ElementProps<SVGEllipseElement>;
export declare type FastLineProps = ElementProps<SVGLineElement>;
export declare type FastImgProps = ElementProps<HTMLImageElement>;
export declare type FastTextareaProps = ElementProps<HTMLTextAreaElement>;
export declare type FastInputProps = ElementProps<HTMLInputElement>;
export declare type FastPProps = ElementProps<HTMLParagraphElement>;
export declare type FastPathProps = ElementProps<SVGPathElement>;
export declare type FastRectProps = ElementProps<SVGRectElement>;
export declare type FastSpanProps = ElementProps<HTMLSpanElement>;
export declare type FastSvgProps = ElementProps<SVGSVGElement>;
export declare type FastForeignOBjectProps = ElementProps<SVGForeignObjectElement>;
export declare type FastTextProps = TextProps;
export declare type FastUseProps = ElementProps<SVGUseElement>;
export declare type FastPolylineProps = ElementProps<SVGPolylineElement>;
export declare type FastPolyGonProps = ElementProps<SVGPolygonElement>;
export declare type FastLinearGradientProps = ElementProps<SVGLinearGradientElement>;
export declare type FastRadialGradientProps = ElementProps<SVGRadialGradientElement>;
export declare type FastStopProps = ElementProps<SVGStopElement>;
export declare type FastSvgTextProps = ElementProps<SVGTextElement>;
export declare type FastPatternProps = ElementProps<SVGPatternElement>;
/**
 * Extends React global namespace with the "fast" types
 */
declare global {
    namespace JSX {
        interface IntrinsicElements {
            'fast-a': FastAProps;
            'fast-circle': FastCircleProps;
            'fast-ellipse': FastEllipseProps;
            'fast-line': FastLineProps;
            'fast-div': FastDivProps;
            'fast-img': FastImgProps;
            'fast-textarea': FastTextareaProps;
            'fast-input': FastInputProps;
            'fast-p': FastPProps;
            'fast-path': FastPathProps;
            'fast-rect': FastRectProps;
            'fast-span': FastSpanProps;
            'fast-text': FastTextProps;
            'fast-svg': FastSvgProps;
            'fast-foreignObject': FastForeignOBjectProps;
            'fast-use': FastUseProps;
            'fast-polyline': FastPolylineProps;
            'fast-polygon': FastPolyGonProps;
            'fast-linearGradient': FastLinearGradientProps;
            'fast-radialGradient': FastRadialGradientProps;
            'fast-stop': FastStopProps;
            'fast-svg-text': FastSvgTextProps;
            'fast-pattern': FastPatternProps;
        }
    }
}
export {};
