"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useFacetCallback = void 0;
const react_1 = require("react");
const types_1 = require("../types");
function useFacetCallback(callback, dependencies, facets, defaultReturnValue) {
    (0, react_1.useLayoutEffect)(() => {
        // Make sure to start subscriptions, even though we are getting the values directly from them
        // We read the values using `.get` to make sure they are always up-to-date
        const unsubscribes = facets.map((facet) => facet.observe(() => { }));
        return () => {
            unsubscribes.forEach((unsubscribe) => unsubscribe());
        };
        // We care about each individual facet and if any is a different reference
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, facets);
    // We care about each individual dependency and if any is a different reference
    // eslint-disable-next-line react-hooks/exhaustive-deps
    const callbackMemoized = (0, react_1.useCallback)(callback, dependencies);
    // Setup a ref so that the callback instance below can be kept the same
    // when Facet instances change across re-renders
    const facetsRef = (0, react_1.useRef)(facets);
    facetsRef.current = facets;
    return (0, react_1.useCallback)((...args) => {
        const facets = facetsRef.current;
        const values = facets.map((facet) => facet.get());
        for (const value of values) {
            if (value === types_1.NO_VALUE)
                return defaultReturnValue !== undefined ? defaultReturnValue : types_1.NO_VALUE;
        }
        return callbackMemoized(...values)(...args);
    }, [callbackMemoized, defaultReturnValue]);
}
exports.useFacetCallback = useFacetCallback;
//# sourceMappingURL=useFacetCallback.js.map