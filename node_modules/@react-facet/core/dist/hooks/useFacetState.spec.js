"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const dom_fiber_testing_library_1 = require("@react-facet/dom-fiber-testing-library");
const types_1 = require("../types");
const useFacetState_1 = require("./useFacetState");
const useFacetEffect_1 = require("./useFacetEffect");
it('first value is the facet, second is the setter', () => {
    let setAdaptValue;
    const ComponentWithFacetEffect = () => {
        const [facet, setFacet] = (0, useFacetState_1.useFacetState)('initial value');
        setAdaptValue = setFacet;
        return (react_1.default.createElement("span", null,
            react_1.default.createElement("fast-text", { text: facet })));
    };
    const scenario = react_1.default.createElement(ComponentWithFacetEffect, null);
    const { container } = (0, dom_fiber_testing_library_1.render)(scenario);
    expect(container.textContent).toBe('initial value');
    (0, dom_fiber_testing_library_1.act)(() => {
        setAdaptValue((previousValue) => (previousValue !== types_1.NO_VALUE ? `${previousValue} ${previousValue}` : ''));
    });
    expect(container.textContent).toBe('initial value initial value');
});
it('should be possible to have value undefined as the first value', () => {
    const effect = jest.fn();
    const ComponentWithFacetEffect = () => {
        const [facet] = (0, useFacetState_1.useFacetState)(undefined);
        (0, useFacetEffect_1.useFacetEffect)(effect, [], [facet]);
        return null;
    };
    (0, dom_fiber_testing_library_1.render)(react_1.default.createElement(ComponentWithFacetEffect, null));
    expect(effect).toHaveBeenCalledWith(undefined);
});
it('memoizes the setter', () => {
    let setter = () => { };
    const ComponentWithFacetEffect = () => {
        const [facet, setFacet] = (0, useFacetState_1.useFacetState)('initial value');
        setter = setFacet;
        return (react_1.default.createElement("span", null,
            react_1.default.createElement("fast-text", { text: facet })));
    };
    const rerender = (0, dom_fiber_testing_library_1.render)(react_1.default.createElement(ComponentWithFacetEffect, null)).rerender;
    const savedSetter = setter;
    rerender(react_1.default.createElement(ComponentWithFacetEffect, null));
    expect(setter).toBe(savedSetter);
});
//# sourceMappingURL=useFacetState.spec.js.map