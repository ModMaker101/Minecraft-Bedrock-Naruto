import { WritableFacet, Value } from '../types';
interface PropSetter<T extends Value, Prop extends keyof T> {
    (value: T[Prop]): void;
}
/**
 * Hook that returns a setter function to a specific property of a given a localFacet
 * Ex:
 * 	- Given a local facet { foo: 'bar' }
 *  - Could be used as useFacetSetter(facet, 'foo')
 *  - And the setter would set the foo property
 *
 * @param facet
 * @param prop the name of the prop to set
 */
export declare function useFacetPropSetter<T extends Record<string, any>, Prop extends keyof T>(facet: WritableFacet<T>, prop: Prop): PropSetter<T, Prop>;
export {};
