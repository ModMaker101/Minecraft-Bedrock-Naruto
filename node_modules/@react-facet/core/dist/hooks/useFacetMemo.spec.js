"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const dom_fiber_testing_library_1 = require("@react-facet/dom-fiber-testing-library");
const useFacetMemo_1 = require("./useFacetMemo");
const types_1 = require("../types");
const useFacetEffect_1 = require("./useFacetEffect");
const facet_1 = require("../facet");
const useFacetState_1 = require("./useFacetState");
it('can cache the map for multiple consumers', () => {
    const mapFn = jest.fn().mockReturnValue('map-value');
    const TestComponent = () => {
        const [valueFacet] = (0, useFacetState_1.useFacetState)('test-value');
        const mappedValueFacet = (0, useFacetMemo_1.useFacetMemo)(mapFn, [], [valueFacet]);
        return (react_1.default.createElement("div", null,
            react_1.default.createElement("fast-text", { text: mappedValueFacet }),
            react_1.default.createElement("fast-text", { text: mappedValueFacet })));
    };
    (0, dom_fiber_testing_library_1.render)(react_1.default.createElement(TestComponent, null));
    expect(mapFn).toHaveBeenCalledTimes(1);
});
describe('multiple dependencies', () => {
    it('maps values from multiple facets', () => {
        const facetA = (0, facet_1.createFacet)({ initialValue: 'A' });
        const facetB = (0, facet_1.createFacet)({ initialValue: 'B' });
        const ComponentWithFacetEffect = () => {
            const adaptValue = (0, useFacetMemo_1.useFacetMemo)((a, b) => `${a}-${b}`, [], [facetA, facetB]);
            return (react_1.default.createElement("span", null,
                react_1.default.createElement("fast-text", { text: adaptValue })));
        };
        const dom = (0, dom_fiber_testing_library_1.render)(react_1.default.createElement(ComponentWithFacetEffect, null));
        expect(dom.container.textContent).toBe('A-B');
        // We verify that if a facet updates, it re-renders
        (0, dom_fiber_testing_library_1.act)(() => {
            facetA.set('Y');
        });
        expect(dom.container.textContent).toBe('Y-B');
    });
    it('supports optional default value', () => {
        const facetA = (0, facet_1.createFacet)({ initialValue: types_1.NO_VALUE });
        const facetB = (0, facet_1.createFacet)({ initialValue: types_1.NO_VALUE });
        const ComponentWithFacetEffect = () => {
            const adaptValue = (0, useFacetMemo_1.useFacetMemo)((a, b) => `${a}-${b}`, [], [facetA, facetB]);
            return (react_1.default.createElement("span", null,
                react_1.default.createElement("fast-text", { text: adaptValue })));
        };
        const dom = (0, dom_fiber_testing_library_1.render)(react_1.default.createElement(ComponentWithFacetEffect, null));
        expect(dom.container.textContent).toBe('');
        // We verify that if a facet updates, it re-renders
        (0, dom_fiber_testing_library_1.act)(() => {
            facetA.set('Y');
        });
        expect(dom.container.textContent).toBe('');
        (0, dom_fiber_testing_library_1.act)(() => {
            facetB.set('X');
        });
        expect(dom.container.textContent).toBe('Y-X');
    });
    it('accepts an equality check and does not fire again if equal', () => {
        const facetA = (0, facet_1.createFacet)({ initialValue: ['A'] });
        const facetB = (0, facet_1.createFacet)({ initialValue: 'B' });
        const nameEqualityCheck = () => {
            let previousName;
            return (current) => {
                if (current.name !== previousName) {
                    previousName = current.name;
                    return false;
                }
                return true;
            };
        };
        const mock = jest.fn();
        const ComponentWithFacetEffect = () => {
            const adaptValue = (0, useFacetMemo_1.useFacetMemo)(([a], b) => ({ name: `${a}-${b}` }), [], [facetA, facetB], nameEqualityCheck);
            (0, useFacetEffect_1.useFacetEffect)((value) => {
                mock(value.name);
            }, [], [adaptValue]);
            return null;
        };
        (0, dom_fiber_testing_library_1.render)(react_1.default.createElement(ComponentWithFacetEffect, null));
        expect(mock).toHaveBeenCalledWith('A-B');
        mock.mockClear();
        // We verify that if a facet updates, it re-renders
        (0, dom_fiber_testing_library_1.act)(() => {
            facetA.set(['Y']);
        });
        expect(mock).toHaveBeenCalledWith('Y-B');
        mock.mockClear();
        // We verify that if a facet updates, it re-renders
        (0, dom_fiber_testing_library_1.act)(() => {
            facetA.set(['Y']);
        });
        expect(mock).not.toHaveBeenCalled();
    });
    it('does not fire change notifications for string primitive', () => {
        const facetA = (0, facet_1.createFacet)({ initialValue: ['A'] });
        const facetB = (0, facet_1.createFacet)({ initialValue: 'B' });
        const mock = jest.fn();
        const ComponentWithFacetEffect = () => {
            const adaptValue = (0, useFacetMemo_1.useFacetMemo)(([a], b) => `${a}-${b}`, [], [facetA, facetB]);
            (0, useFacetEffect_1.useFacetEffect)((value) => {
                mock(value);
            }, [], [adaptValue]);
            return null;
        };
        (0, dom_fiber_testing_library_1.render)(react_1.default.createElement(ComponentWithFacetEffect, null));
        expect(mock).toHaveBeenCalledWith('A-B');
        mock.mockClear();
        // We verify that if a facet updates, it re-renders
        (0, dom_fiber_testing_library_1.act)(() => {
            facetA.set(['Y']);
        });
        expect(mock).toHaveBeenCalledWith('Y-B');
        mock.mockClear();
        // We verify that if a facet updates, it re-renders
        (0, dom_fiber_testing_library_1.act)(() => {
            facetA.set(['Y']);
        });
        expect(mock).not.toHaveBeenCalled();
    });
    it('does not fire change notifications for number primitive', () => {
        const facetA = (0, facet_1.createFacet)({ initialValue: [1] });
        const facetB = (0, facet_1.createFacet)({ initialValue: 2 });
        const mock = jest.fn();
        const ComponentWithFacetEffect = () => {
            const adaptValue = (0, useFacetMemo_1.useFacetMemo)(([a], b) => a + b, [], [facetA, facetB]);
            (0, useFacetEffect_1.useFacetEffect)((value) => {
                mock(value);
            }, [], [adaptValue]);
            return null;
        };
        (0, dom_fiber_testing_library_1.render)(react_1.default.createElement(ComponentWithFacetEffect, null));
        expect(mock).toHaveBeenCalledWith(3);
        mock.mockClear();
        // We verify that if a facet updates, it re-renders
        (0, dom_fiber_testing_library_1.act)(() => {
            facetA.set([20]);
        });
        expect(mock).toHaveBeenCalledWith(22);
        mock.mockClear();
        // We verify that if a facet updates, it re-renders
        (0, dom_fiber_testing_library_1.act)(() => {
            facetA.set([20]);
        });
        expect(mock).not.toHaveBeenCalled();
    });
    it('does not fire change notifications for boolean primitive', () => {
        const facetA = (0, facet_1.createFacet)({ initialValue: [false] });
        const facetB = (0, facet_1.createFacet)({ initialValue: true });
        const mock = jest.fn();
        const ComponentWithFacetEffect = () => {
            const adaptValue = (0, useFacetMemo_1.useFacetMemo)(([a], b) => a && b, [], [facetA, facetB]);
            (0, useFacetEffect_1.useFacetEffect)((value) => {
                mock(value);
            }, [], [adaptValue]);
            return null;
        };
        (0, dom_fiber_testing_library_1.render)(react_1.default.createElement(ComponentWithFacetEffect, null));
        expect(mock).toHaveBeenCalledWith(false);
        mock.mockClear();
        // We verify that if a facet updates, it re-renders
        (0, dom_fiber_testing_library_1.act)(() => {
            facetA.set([true]);
        });
        expect(mock).toHaveBeenCalledWith(true);
        mock.mockClear();
        // We verify that if a facet updates, it re-renders
        (0, dom_fiber_testing_library_1.act)(() => {
            facetA.set([true]);
        });
        expect(mock).not.toHaveBeenCalled();
    });
});
describe('single dependency', () => {
    it('triggers when there is a change in the facet', () => {
        const demoFacet = (0, facet_1.createFacet)({ initialValue: 'initial value' });
        const callback = jest.fn();
        const ComponentWithFacetEffect = () => {
            const adaptValue = (0, useFacetMemo_1.useFacetMemo)((value) => value + value, [], [demoFacet]);
            (0, react_1.useEffect)(() => {
                adaptValue.observe((value) => {
                    callback(value);
                });
            }, [adaptValue]);
            return null;
        };
        const scenario = react_1.default.createElement(ComponentWithFacetEffect, null);
        (0, dom_fiber_testing_library_1.render)(scenario);
        expect(callback).toHaveBeenCalledWith('initial valueinitial value');
    });
    it('properly memoizes the returned facet', () => {
        const demoFacet = (0, facet_1.createFacet)({ initialValue: 'initial value' });
        const TestComponent = () => {
            const previousMappedFacetRef = (0, react_1.useRef)();
            const mappedFacet = (0, useFacetMemo_1.useFacetMemo)((value) => value, [], [demoFacet]);
            // Check if it is a second render
            if (previousMappedFacetRef.current) {
                // check if previous and current mappedFacet are the same instance
                if (previousMappedFacetRef.current !== mappedFacet) {
                    throw new Error('Facet instance has change');
                }
            }
            previousMappedFacetRef.current = mappedFacet;
            return null;
        };
        const { rerender } = (0, dom_fiber_testing_library_1.render)(react_1.default.createElement(TestComponent, null));
        // Render a second time to check (inside the component)
        // if the instance is the same
        rerender(react_1.default.createElement(TestComponent, null));
    });
    it('properly memoizes the returned facet for multiple dependencies', () => {
        const demoFacet = (0, facet_1.createFacet)({ initialValue: 'initial value' });
        const secondFacet = (0, facet_1.createFacet)({ initialValue: 'initial value' });
        const TestComponent = () => {
            const previousMappedFacetRef = (0, react_1.useRef)();
            const mappedFacet = (0, useFacetMemo_1.useFacetMemo)((value) => value, [], [demoFacet, secondFacet]);
            // Check if it is a second render
            if (previousMappedFacetRef.current) {
                // check if previous and current mappedFacet are the same instance
                if (previousMappedFacetRef.current !== mappedFacet) {
                    throw new Error('Facet instance has change');
                }
            }
            previousMappedFacetRef.current = mappedFacet;
            return null;
        };
        const { rerender } = (0, dom_fiber_testing_library_1.render)(react_1.default.createElement(TestComponent, null));
        // Render a second time to check (inside the component)
        // if the instance is the same
        rerender(react_1.default.createElement(TestComponent, null));
    });
    it('supports optional default value for single dependency', () => {
        const facetA = (0, facet_1.createFacet)({ initialValue: types_1.NO_VALUE });
        const ComponentWithFacetEffect = () => {
            const adaptValue = (0, useFacetMemo_1.useFacetMemo)((a) => a, [], [facetA]);
            return (react_1.default.createElement("span", null,
                react_1.default.createElement("fast-text", { text: adaptValue })));
        };
        const dom = (0, dom_fiber_testing_library_1.render)(react_1.default.createElement(ComponentWithFacetEffect, null));
        expect(dom.container.textContent).toBe('');
        // We verify that if a facet updates, it re-renders
        (0, dom_fiber_testing_library_1.act)(() => {
            facetA.set('Y');
        });
        expect(dom.container.textContent).toBe('Y');
    });
    it('accepts an equality check and does not fire again if equal', () => {
        const facetA = (0, facet_1.createFacet)({ initialValue: [{ name: 'A' }] });
        const nameEqualityCheck = () => {
            let previousName;
            return (current) => {
                if (current.name !== previousName) {
                    previousName = current.name;
                    return false;
                }
                return true;
            };
        };
        const mock = jest.fn();
        const ComponentWithFacetEffect = () => {
            const adaptValue = (0, useFacetMemo_1.useFacetMemo)(([a]) => a, [], [facetA], nameEqualityCheck);
            (0, useFacetEffect_1.useFacetEffect)((value) => {
                mock(value.name);
            }, [], [adaptValue]);
            return null;
        };
        (0, dom_fiber_testing_library_1.render)(react_1.default.createElement(ComponentWithFacetEffect, null));
        expect(mock).toHaveBeenCalledWith('A');
        mock.mockClear();
        // We verify that if a facet updates, it re-renders
        (0, dom_fiber_testing_library_1.act)(() => {
            facetA.set([{ name: 'Y' }]);
        });
        expect(mock).toHaveBeenCalledWith('Y');
        mock.mockClear();
        // We verify that if a facet updates, it re-renders
        (0, dom_fiber_testing_library_1.act)(() => {
            facetA.set([{ name: 'Y' }]);
        });
        expect(mock).not.toHaveBeenCalled();
    });
    it('does not fire change notifications for string primitive', () => {
        const facetA = (0, facet_1.createFacet)({ initialValue: [{ name: 'A' }] });
        const mock = jest.fn();
        const ComponentWithFacetEffect = () => {
            const adaptValue = (0, useFacetMemo_1.useFacetMemo)(([a]) => a.name, [], [facetA]);
            (0, useFacetEffect_1.useFacetEffect)((value) => {
                mock(value);
            }, [], [adaptValue]);
            return null;
        };
        (0, dom_fiber_testing_library_1.render)(react_1.default.createElement(ComponentWithFacetEffect, null));
        expect(mock).toHaveBeenCalledWith('A');
        mock.mockClear();
        // We verify that if a facet updates, it re-renders
        (0, dom_fiber_testing_library_1.act)(() => {
            facetA.set([{ name: 'Y' }]);
        });
        expect(mock).toHaveBeenCalledWith('Y');
        mock.mockClear();
        // We verify that if a facet updates, it re-renders
        (0, dom_fiber_testing_library_1.act)(() => {
            facetA.set([{ name: 'Y' }]);
        });
        expect(mock).not.toHaveBeenCalled();
    });
    it('does not fire change notifications for number primitive', () => {
        const facetA = (0, facet_1.createFacet)({ initialValue: [{ name: 1 }] });
        const mock = jest.fn();
        const ComponentWithFacetEffect = () => {
            const adaptValue = (0, useFacetMemo_1.useFacetMemo)(([a]) => a.name, [], [facetA]);
            (0, useFacetEffect_1.useFacetEffect)((value) => {
                mock(value);
            }, [], [adaptValue]);
            return null;
        };
        (0, dom_fiber_testing_library_1.render)(react_1.default.createElement(ComponentWithFacetEffect, null));
        expect(mock).toHaveBeenCalledWith(1);
        mock.mockClear();
        // We verify that if a facet updates, it re-renders
        (0, dom_fiber_testing_library_1.act)(() => {
            facetA.set([{ name: 2 }]);
        });
        expect(mock).toHaveBeenCalledWith(2);
        mock.mockClear();
        // We verify that if a facet updates, it re-renders
        (0, dom_fiber_testing_library_1.act)(() => {
            facetA.set([{ name: 2 }]);
        });
        expect(mock).not.toHaveBeenCalled();
    });
    it('does not fire change notifications for boolean primitive', () => {
        const facetA = (0, facet_1.createFacet)({ initialValue: [{ name: true }] });
        const mock = jest.fn();
        const ComponentWithFacetEffect = () => {
            const adaptValue = (0, useFacetMemo_1.useFacetMemo)(([a]) => a.name, [], [facetA]);
            (0, useFacetEffect_1.useFacetEffect)((value) => {
                mock(value);
            }, [], [adaptValue]);
            return null;
        };
        (0, dom_fiber_testing_library_1.render)(react_1.default.createElement(ComponentWithFacetEffect, null));
        expect(mock).toHaveBeenCalledWith(true);
        mock.mockClear();
        // We verify that if a facet updates, it re-renders
        (0, dom_fiber_testing_library_1.act)(() => {
            facetA.set([{ name: false }]);
        });
        expect(mock).toHaveBeenCalledWith(false);
        mock.mockClear();
        // We verify that if a facet updates, it re-renders
        (0, dom_fiber_testing_library_1.act)(() => {
            facetA.set([{ name: false }]);
        });
        expect(mock).not.toHaveBeenCalled();
    });
});
//# sourceMappingURL=useFacetMemo.spec.js.map