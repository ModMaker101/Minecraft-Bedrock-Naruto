"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const createEqualityChecks_1 = require("./createEqualityChecks");
const equalityChecks_1 = require("./equalityChecks");
describe('createUniformObjectEqualityCheck', () => {
    it('handles matching arguments', () => {
        const equalityCheck = (0, createEqualityChecks_1.createUniformObjectEqualityCheck)(equalityChecks_1.strictEqualityCheck)();
        expect(equalityCheck({ a: 1, b: 2, c: 2 })).toBe(false);
        expect(equalityCheck({ a: 1, b: 2, c: 2 })).toBe(true);
        expect(equalityCheck({ a: 1, b: 2, c: 4 })).toBe(false);
        expect(equalityCheck({ a: 1, b: 2, c: 4 })).toBe(true);
    });
});
describe('createUniformArrayEqualityCheck', () => {
    it('handles matching arguments', () => {
        const equalityCheck = (0, createEqualityChecks_1.createUniformArrayEqualityCheck)(equalityChecks_1.strictEqualityCheck)();
        expect(equalityCheck(['a', 'b', 'c'])).toBe(false);
        expect(equalityCheck(['a', 'b', 'c'])).toBe(true);
    });
    it('handles empty arrays', () => {
        const equalityCheck = (0, createEqualityChecks_1.createUniformArrayEqualityCheck)(equalityChecks_1.strictEqualityCheck)();
        expect(equalityCheck([])).toBe(false);
        expect(equalityCheck([])).toBe(true);
    });
    it('handles non-matching arguments', () => {
        const equalityCheck = (0, createEqualityChecks_1.createUniformArrayEqualityCheck)(equalityChecks_1.strictEqualityCheck)();
        expect(equalityCheck(['a', 'b', 'c'])).toBe(false);
        expect(equalityCheck(['a', 'b', 'a'])).toBe(false);
        expect(equalityCheck(['a'])).toBe(false);
        expect(equalityCheck([])).toBe(false);
        expect(equalityCheck(['a'])).toBe(false);
    });
    it('handles arrays with objects inside', () => {
        const equalityCheck = (0, createEqualityChecks_1.createUniformArrayEqualityCheck)(equalityChecks_1.shallowObjectEqualityCheck)();
        expect(equalityCheck([{ a: 1 }, { a: 2 }])).toBe(false);
        expect(equalityCheck([{ a: 1 }, { a: 2 }])).toBe(true);
        expect(equalityCheck([{ a: 1 }, { a: 3 }])).toBe(false);
        expect(equalityCheck([{ a: 1 }, { a: 3 }])).toBe(true);
        expect(equalityCheck([{ a: 1 }, { a: 3 }, { a: 2 }])).toBe(false);
        expect(equalityCheck([{ a: 1 }, { a: 3 }, { a: 2 }])).toBe(true);
        expect(equalityCheck([{ a: 1 }])).toBe(false);
    });
});
describe('createObjectWithKeySpecificEqualityCheck', () => {
    it('handles a different type of equality check on each key', () => {
        const equalityCheck = (0, createEqualityChecks_1.createObjectWithKeySpecificEqualityCheck)({
            name: equalityChecks_1.strictEqualityCheck,
            age: equalityChecks_1.strictEqualityCheck,
            posts: (0, createEqualityChecks_1.createUniformArrayEqualityCheck)(equalityChecks_1.shallowObjectEqualityCheck),
        })();
        expect(equalityCheck({ name: 'test', age: 20, posts: [{ title: 'a' }] })).toBe(false);
        expect(equalityCheck({ name: 'test', age: 20, posts: [{ title: 'a' }] })).toBe(true);
        expect(equalityCheck({ name: 'test', age: 20, posts: [{ title: 'a' }, { title: 'b' }] })).toBe(false);
        expect(equalityCheck({ name: 'test', age: 20, posts: [{ title: 'a' }, { title: 'b' }] })).toBe(true);
        expect(equalityCheck({ name: 'test', age: 21, posts: [{ title: 'a' }, { title: 'b' }] })).toBe(false);
        expect(equalityCheck({ name: 'test', age: 21, posts: [{ title: 'a' }, { title: 'b' }] })).toBe(true);
    });
});
describe('createOptionalValueEqualityCheck', () => {
    it('handles comparing nullary values, and letting the non-null be compared by the argument', () => {
        const equalityCheck = (0, createEqualityChecks_1.createOptionalValueEqualityCheck)(equalityChecks_1.shallowObjectEqualityCheck)();
        expect(equalityCheck({ a: 1 })).toBe(false);
        expect(equalityCheck({ a: 1 })).toBe(true);
        expect(equalityCheck(null)).toBe(false);
        expect(equalityCheck(null)).toBe(true);
        expect(equalityCheck(undefined)).toBe(true);
        expect(equalityCheck({ a: 1 })).toBe(false);
        expect(equalityCheck({ a: 2 })).toBe(false);
        expect(equalityCheck({ a: 2 })).toBe(true);
    });
});
//# sourceMappingURL=createEqualityChecks.spec.js.map