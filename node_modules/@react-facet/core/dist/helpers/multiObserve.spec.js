"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const __1 = require("..");
const multiObserve_1 = require("./multiObserve");
it('fires immediately when facets are initialized', () => {
    const facetA = (0, __1.createFacet)({
        initialValue: 1,
    });
    const facetB = (0, __1.createFacet)({
        initialValue: 2,
    });
    let toBeUpdated = [];
    (0, multiObserve_1.multiObserve)((a, b) => {
        toBeUpdated = [a, b];
    }, [facetA, facetB]);
    expect(toBeUpdated).toEqual([1, 2]);
});
it('does not fire if at least one of the facets does not yet have a value', () => {
    const facetA = (0, __1.createFacet)({
        initialValue: 1,
    });
    const facetB = (0, __1.createFacet)({ initialValue: __1.NO_VALUE });
    let toBeUpdated = [];
    (0, multiObserve_1.multiObserve)((a, b) => {
        toBeUpdated = [a, b];
    }, [facetA, facetB]);
    expect(toBeUpdated).toEqual([]);
});
it('fires again when any of the dependency facets are updated', () => {
    const facetA = (0, __1.createFacet)({
        initialValue: 1,
    });
    const facetB = (0, __1.createFacet)({
        initialValue: 2,
    });
    let toBeUpdated = [];
    (0, multiObserve_1.multiObserve)((a, b) => {
        toBeUpdated = [a, b];
    }, [facetA, facetB]);
    facetA.set(3);
    expect(toBeUpdated).toEqual([3, 2]);
    facetB.set(4);
    expect(toBeUpdated).toEqual([3, 4]);
});
it('calling the return unsubscriber stops the observe from working', () => {
    const facetA = (0, __1.createFacet)({
        initialValue: 1,
    });
    const facetB = (0, __1.createFacet)({
        initialValue: 2,
    });
    let toBeUpdated = [];
    const unObserve = (0, multiObserve_1.multiObserve)((a, b) => {
        toBeUpdated = [a, b];
    }, [facetA, facetB]);
    facetA.set(3);
    expect(toBeUpdated).toEqual([3, 2]);
    facetB.set(4);
    expect(toBeUpdated).toEqual([3, 4]);
    unObserve();
    facetA.set(6);
    expect(toBeUpdated).toEqual([3, 4]);
    facetB.set(5);
    expect(toBeUpdated).toEqual([3, 4]);
});
//# sourceMappingURL=multiObserve.spec.js.map