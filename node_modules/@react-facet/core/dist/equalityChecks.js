"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.defaultEqualityCheck = exports.nullableShallowArrayEqualityCheck = exports.nullableShallowObjectArrayEqualityCheck = exports.nullableShallowObjectEqualityCheck = exports.shallowArrayEqualityCheck = exports.shallowObjectArrayEqualityCheck = exports.shallowObjectEqualityCheck = exports.strictEqualityCheck = void 0;
const createEqualityChecks_1 = require("./createEqualityChecks");
const types_1 = require("./types");
/**
 * Checks that the current value is exactly the same as the other previous one. Accepts value of type
 * function, number, boolean, string, undefined or null
 */
// eslint-disable-next-line @typescript-eslint/ban-types
const strictEqualityCheck = () => {
    let previous = types_1.NO_VALUE;
    return (current) => {
        if (previous !== current) {
            previous = current;
            return false;
        }
        return true;
    };
};
exports.strictEqualityCheck = strictEqualityCheck;
/**
 * Equality check that verifies the values of each key of an object.
 * Each value must be a primitive (boolean, number or string)
 *
 * For null or undefined values see nullableShallowObjectEqualityCheck
 */
exports.shallowObjectEqualityCheck = (0, createEqualityChecks_1.createUniformObjectEqualityCheck)(exports.strictEqualityCheck);
/**
 * Does a shallow object equality check for each element in an array
 *
 * For null or undefined values see nullableShallowObjectArrayEqualityCheck
 */
exports.shallowObjectArrayEqualityCheck = (0, createEqualityChecks_1.createUniformArrayEqualityCheck)(exports.shallowObjectEqualityCheck);
/**
 * Shallow equality check of primitives in an array
 *
 * For null or undefined values see nullableShallowArrayEqualityCheck
 */
exports.shallowArrayEqualityCheck = (0, createEqualityChecks_1.createUniformArrayEqualityCheck)(exports.strictEqualityCheck);
/**
 * Equality check that verifies the values of each key of an object.
 * Each value must be a primitive (boolean, number or string)
 *
 * Supports nullable values
 */
const nullableShallowObjectEqualityCheck = () => (0, createEqualityChecks_1.createNullableEqualityCheck)((0, createEqualityChecks_1.createUniformObjectEqualityCheck)(exports.strictEqualityCheck));
exports.nullableShallowObjectEqualityCheck = nullableShallowObjectEqualityCheck;
/**
 * Does a shallow object equality check for each element in an array
 *
 * Supports nullable values
 */
exports.nullableShallowObjectArrayEqualityCheck = (0, createEqualityChecks_1.createNullableEqualityCheck)((0, createEqualityChecks_1.createUniformArrayEqualityCheck)(exports.shallowObjectEqualityCheck));
/**
 * Shallow equality check of primitives in an array
 *
 * Supports nullable values
 */
exports.nullableShallowArrayEqualityCheck = (0, createEqualityChecks_1.createNullableEqualityCheck)((0, createEqualityChecks_1.createUniformArrayEqualityCheck)(exports.strictEqualityCheck));
/**
 * The default equality check that assumes data can be mutated.
 * It is used internally by default, so there is no need to provide it.
 */
const defaultEqualityCheck = () => {
    let previous = types_1.NO_VALUE;
    return (current) => {
        const typeofValue = typeof current;
        if (!(typeofValue === 'number' ||
            typeofValue === 'string' ||
            typeofValue === 'boolean' ||
            current === null ||
            current === undefined)) {
            return false;
        }
        if (current !== previous) {
            previous = current;
            return false;
        }
        return true;
    };
};
exports.defaultEqualityCheck = defaultEqualityCheck;
//# sourceMappingURL=equalityChecks.js.map