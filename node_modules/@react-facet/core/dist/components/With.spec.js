"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const dom_fiber_testing_library_1 = require("@react-facet/dom-fiber-testing-library");
const _1 = require(".");
const facet_1 = require("../facet");
const types_1 = require("../types");
const hooks_1 = require("../hooks");
it('renders when not null, passing down the information', () => {
    const userFacet = (0, facet_1.createFacet)({ initialValue: { user: 'Zelda' } });
    const Content = ({ data }) => {
        return (react_1.default.createElement("div", null,
            "Hello ",
            react_1.default.createElement("fast-text", { text: (0, hooks_1.useFacetMap)(({ user }) => user, [], [data]) })));
    };
    const Example = () => {
        return react_1.default.createElement(_1.With, { data: userFacet }, (dataFacet) => react_1.default.createElement(Content, { data: dataFacet }));
    };
    const scenario = react_1.default.createElement(Example, null);
    const { container } = (0, dom_fiber_testing_library_1.render)(scenario);
    expect(container.firstChild).toMatchSnapshot();
});
it('does not render when nullish', () => {
    const userFacet = (0, facet_1.createFacet)({ initialValue: null });
    const rendered = jest.fn();
    const Content = () => {
        rendered();
        return react_1.default.createElement("div", null, "Hello there");
    };
    const Example = () => {
        return react_1.default.createElement(_1.With, { data: userFacet }, () => react_1.default.createElement(Content, null));
    };
    const scenario = react_1.default.createElement(Example, null);
    (0, dom_fiber_testing_library_1.render)(scenario);
    expect(rendered).not.toHaveBeenCalled();
});
it('does not render facet has no value', () => {
    const userFacet = (0, facet_1.createFacet)({ initialValue: types_1.NO_VALUE });
    const rendered = jest.fn();
    const Content = () => {
        rendered();
        return react_1.default.createElement("div", null, "Hello there");
    };
    const Example = () => {
        return react_1.default.createElement(_1.With, { data: userFacet }, () => react_1.default.createElement(Content, null));
    };
    const scenario = react_1.default.createElement(Example, null);
    (0, dom_fiber_testing_library_1.render)(scenario);
    expect(rendered).not.toHaveBeenCalled();
});
it('correctly handles unmounting', () => {
    const mockFacet = (0, facet_1.createFacet)({ initialValue: 'abc' });
    const Content = ({ data }) => {
        (0, hooks_1.useFacetEffect)((data) => {
            if (data === null || data === undefined) {
                throw new Error('data should not be null');
            }
        }, [], [data]);
        return react_1.default.createElement(react_1.default.Fragment, null, "mounted");
    };
    const Example = () => {
        return react_1.default.createElement(_1.With, { data: mockFacet }, (mock) => react_1.default.createElement(Content, { data: mock }));
    };
    const scenario = react_1.default.createElement(Example, null);
    const result = (0, dom_fiber_testing_library_1.render)(scenario);
    expect(result.container).toHaveTextContent('mounted');
    (0, dom_fiber_testing_library_1.act)(() => mockFacet.set(null));
    expect(result.container).not.toHaveTextContent('mounted');
});
//# sourceMappingURL=With.spec.js.map