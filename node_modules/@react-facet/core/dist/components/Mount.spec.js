"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const dom_fiber_testing_library_1 = require("@react-facet/dom-fiber-testing-library");
const _1 = require(".");
const facet_1 = require("../facet");
const mapFacets_1 = require("../mapFacets");
const types_1 = require("../types");
it('renders when true', () => {
    const display = (0, facet_1.createFacet)({ initialValue: true });
    const rendered = jest.fn();
    const Content = () => {
        rendered();
        return react_1.default.createElement("div", null, "Hello there");
    };
    const Example = () => {
        return (react_1.default.createElement(_1.Mount, { when: display },
            react_1.default.createElement(Content, null)));
    };
    const scenario = react_1.default.createElement(Example, null);
    const { container } = (0, dom_fiber_testing_library_1.render)(scenario);
    expect(rendered).toHaveBeenCalled();
    expect(container.firstChild).toMatchSnapshot();
});
it('does not render when false', () => {
    const display = (0, facet_1.createFacet)({ initialValue: false });
    const rendered = jest.fn();
    const Content = () => {
        rendered();
        return react_1.default.createElement("div", null, "Hello there");
    };
    const Example = () => {
        return (react_1.default.createElement(_1.Mount, { when: display },
            react_1.default.createElement(Content, null)));
    };
    const scenario = react_1.default.createElement(Example, null);
    (0, dom_fiber_testing_library_1.render)(scenario);
    expect(rendered).not.toHaveBeenCalled();
});
it('can perform conditional rendering', () => {
    const itemsFacet = (0, facet_1.createFacet)({ initialValue: types_1.NO_VALUE });
    const hasItemsFacet = (0, mapFacets_1.mapFacetsLightweight)([itemsFacet], (x) => Boolean(x.length));
    const componentText = 'The component passed the condition and is being rendered';
    const Component = jest.fn();
    Component.mockImplementation(() => react_1.default.createElement("div", null, componentText));
    const Example = () => {
        return (react_1.default.createElement(_1.Mount, { when: hasItemsFacet, condition: false },
            react_1.default.createElement(Component, null)));
    };
    const scenario = react_1.default.createElement(Example, null);
    (0, dom_fiber_testing_library_1.render)(scenario);
    // It should not render before the facet has produced a value.
    expect(dom_fiber_testing_library_1.screen.queryByText(componentText)).not.toBeInTheDocument();
    expect(Component).not.toHaveBeenCalled();
    (0, dom_fiber_testing_library_1.act)(() => {
        itemsFacet.set([]);
    });
    expect(dom_fiber_testing_library_1.screen.queryByText(componentText)).toBeInTheDocument();
    expect(Component).toHaveBeenCalledTimes(1);
    (0, dom_fiber_testing_library_1.act)(() => {
        itemsFacet.set(['Lorem ipsum']);
    });
    expect(dom_fiber_testing_library_1.screen.queryByText(componentText)).not.toBeInTheDocument();
    expect(Component).toHaveBeenCalledTimes(1);
});
//# sourceMappingURL=Mount.spec.js.map