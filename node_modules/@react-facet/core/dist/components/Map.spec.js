"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const dom_fiber_testing_library_1 = require("@react-facet/dom-fiber-testing-library");
const facet_1 = require("../facet");
const hooks_1 = require("../hooks");
const _1 = require(".");
it('renders all items in a Facet of array', () => {
    const data = (0, facet_1.createFacet)({
        initialValue: [{ a: '1' }, { a: '2' }, { a: '3' }, { a: '4' }, { a: '5' }],
    });
    const ExampleContent = ({ item, index }) => {
        return (react_1.default.createElement("span", null,
            react_1.default.createElement("fast-text", { text: (0, hooks_1.useFacetMap)(({ a }) => a, [], [item]) }),
            react_1.default.createElement("span", null, index)));
    };
    const inputEqualityCheck = () => {
        const previous = {};
        return (current) => {
            if (current.a === previous.a) {
                return true;
            }
            previous.a = current.a;
            return false;
        };
    };
    const Example = () => {
        return (react_1.default.createElement(_1.Map, { array: data, equalityCheck: inputEqualityCheck }, (item, index) => react_1.default.createElement(ExampleContent, { item: item, index: index })));
    };
    const scenario = react_1.default.createElement(Example, null);
    const { container } = (0, dom_fiber_testing_library_1.render)(scenario);
    expect(container).toMatchSnapshot();
});
it('unmounts components when the array reduces in size', () => {
    const data = (0, facet_1.createFacet)({
        initialValue: [{ value: '1' }, { value: '2' }, { value: '3' }, { value: '4' }, { value: '5' }],
    });
    const Item = ({ item, index }) => (react_1.default.createElement("span", null,
        react_1.default.createElement("fast-text", { text: (0, hooks_1.useFacetMap)(({ value }) => value, [], [item]) }),
        react_1.default.createElement("span", null, index)));
    const itemEqualityCheck = () => {
        const previous = {};
        return (current) => {
            if (current.value === previous.value) {
                return true;
            }
            previous.value = current.value;
            return false;
        };
    };
    const Example = () => {
        return (react_1.default.createElement(_1.Map, { array: data, equalityCheck: itemEqualityCheck }, (item, index) => react_1.default.createElement(Item, { item: item, index: index })));
    };
    const scenario = react_1.default.createElement(Example, null);
    const { container } = (0, dom_fiber_testing_library_1.render)(scenario);
    expect(container).toMatchSnapshot();
    data.set([{ value: '1' }, { value: '2' }]);
    expect(container).toMatchSnapshot();
});
it('updates only items that have changed', () => {
    const data = (0, facet_1.createFacet)({
        initialValue: [{ a: '1' }, { a: '2' }, { a: '3' }, { a: '4' }, { a: '5' }],
    });
    const mock = jest.fn();
    const ExampleContent = ({ item }) => {
        (0, hooks_1.useFacetEffect)(mock, [], [item]);
        return null;
    };
    const inputEqualityCheck = () => {
        const previous = {};
        return (current) => {
            if (current.a === previous.a) {
                return true;
            }
            previous.a = current.a;
            return false;
        };
    };
    const Example = () => {
        return (react_1.default.createElement(_1.Map, { array: data, equalityCheck: inputEqualityCheck }, (item) => react_1.default.createElement(ExampleContent, { item: item })));
    };
    const scenario = react_1.default.createElement(Example, null);
    (0, dom_fiber_testing_library_1.render)(scenario);
    expect(mock).toHaveBeenCalledTimes(5);
    mock.mockClear();
    (0, dom_fiber_testing_library_1.act)(() => {
        data.set([{ a: '6' }, { a: '2' }, { a: '3' }, { a: '4' }, { a: '5' }]);
    });
    expect(mock).toHaveBeenCalledTimes(1);
    expect(mock).toHaveBeenCalledWith({ a: '6' });
});
it('provides the length of the array', () => {
    const data = (0, facet_1.createFacet)({
        initialValue: [{ a: '1' }, { a: '2' }, { a: '3' }],
    });
    const ExampleContent = ({ index, length }) => {
        return react_1.default.createElement(react_1.default.Fragment, null, length === index + 1 && react_1.default.createElement("div", { "data-testid": 'length' }, length));
    };
    const Example = () => {
        return react_1.default.createElement(_1.Map, { array: data }, (_, index, length) => react_1.default.createElement(ExampleContent, { index: index, length: length }));
    };
    const { getByTestId } = (0, dom_fiber_testing_library_1.render)(react_1.default.createElement(Example, null));
    expect(getByTestId('length')).toHaveTextContent('3');
});
//# sourceMappingURL=Map.spec.js.map