"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mapIntoObserveSingle = void 0;
const equalityChecks_1 = require("../equalityChecks");
const types_1 = require("../types");
function mapIntoObserveSingle(facet, fn, equalityCheck) {
    // Most common scenario is not having any equality check
    if (equalityCheck === undefined) {
        return (listener) => {
            return facet.observe((value) => {
                const result = fn(value);
                if (result === types_1.NO_VALUE)
                    return;
                listener(result);
            });
        };
    }
    // Then we optimize for the second most common scenario of using the defaultEqualityCheck (by inline its implementation)
    if (equalityCheck === equalityChecks_1.defaultEqualityCheck) {
        return (listener) => {
            let currentValue = types_1.NO_VALUE;
            return facet.observe((value) => {
                const result = fn(value);
                if (result === types_1.NO_VALUE)
                    return;
                const typeofValue = typeof currentValue;
                if ((typeofValue === 'number' ||
                    typeofValue === 'string' ||
                    typeofValue === 'boolean' ||
                    currentValue === null ||
                    currentValue === undefined) &&
                    currentValue === result) {
                    return;
                }
                currentValue = result;
                listener(result);
            });
        };
    }
    // Finally we use the custom equality check
    return (listener) => {
        const checker = equalityCheck();
        return facet.observe((value) => {
            const result = fn(value);
            if (result === types_1.NO_VALUE)
                return;
            if (checker(result))
                return;
            listener(result);
        });
    };
}
exports.mapIntoObserveSingle = mapIntoObserveSingle;
//# sourceMappingURL=mapIntoObserveSingle.js.map