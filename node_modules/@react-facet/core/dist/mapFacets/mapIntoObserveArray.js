"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mapIntoObserveArray = void 0;
const scheduler_1 = require("../scheduler");
const equalityChecks_1 = require("../equalityChecks");
const types_1 = require("../types");
function mapIntoObserveArray(facets, 
// eslint-disable-next-line @typescript-eslint/no-explicit-any
fn, equalityCheck) {
    return (listener) => {
        let currentValue = types_1.NO_VALUE;
        const checker = equalityCheck === null || equalityCheck === void 0 ? void 0 : equalityCheck();
        const dependencyValues = facets.map(() => types_1.NO_VALUE);
        let hasAllDependencies = false;
        const task = checker === undefined
            ? () => {
                hasAllDependencies = hasAllDependencies || dependencyValues.every((value) => value !== types_1.NO_VALUE);
                if (!hasAllDependencies)
                    return;
                const result = fn(...dependencyValues);
                if (result === types_1.NO_VALUE)
                    return;
                listener(result);
            }
            : equalityCheck === equalityChecks_1.defaultEqualityCheck
                ? () => {
                    hasAllDependencies = hasAllDependencies || dependencyValues.every((value) => value !== types_1.NO_VALUE);
                    if (!hasAllDependencies)
                        return;
                    const result = fn(...dependencyValues);
                    if (result === types_1.NO_VALUE)
                        return;
                    const typeofValue = typeof currentValue;
                    if ((typeofValue === 'number' ||
                        typeofValue === 'string' ||
                        typeofValue === 'boolean' ||
                        currentValue === null ||
                        currentValue === undefined) &&
                        currentValue === result) {
                        return;
                    }
                    currentValue = result;
                    listener(result);
                }
                : () => {
                    hasAllDependencies = hasAllDependencies || dependencyValues.every((value) => value !== types_1.NO_VALUE);
                    if (!hasAllDependencies)
                        return;
                    const result = fn(...dependencyValues);
                    if (result === types_1.NO_VALUE)
                        return;
                    if (checker(result))
                        return;
                    listener(result);
                };
        const subscriptions = facets.map((facet, index) => {
            return facet.observe((value) => {
                dependencyValues[index] = value;
                if (hasAllDependencies) {
                    (0, scheduler_1.scheduleTask)(task);
                }
                else {
                    task();
                }
            });
        });
        return () => {
            (0, scheduler_1.cancelScheduledTask)(task);
            subscriptions.forEach((unsubscribe) => unsubscribe());
        };
    };
}
exports.mapIntoObserveArray = mapIntoObserveArray;
//# sourceMappingURL=mapIntoObserveArray.js.map