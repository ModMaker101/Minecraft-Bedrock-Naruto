"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const dom_fiber_testing_library_1 = require("@react-facet/dom-fiber-testing-library");
const createFacetContext_1 = require("./createFacetContext");
const hooks_1 = require("./hooks");
it(`has default value`, () => {
    const defaultValue = 'defaultValue';
    const context = (0, createFacetContext_1.createFacetContext)(defaultValue);
    const Component = () => {
        const stringFacet = (0, react_1.useContext)(context);
        return react_1.default.createElement("fast-text", { text: stringFacet });
    };
    const result = (0, dom_fiber_testing_library_1.render)(react_1.default.createElement(Component, null));
    expect(result.baseElement).toContainHTML(defaultValue);
});
it(`allows provider to set new value`, () => {
    const defaultValue = 'defaultValue';
    const context = (0, createFacetContext_1.createFacetContext)(defaultValue);
    const Component = () => {
        const stringFacet = (0, react_1.useContext)(context);
        return react_1.default.createElement("fast-text", { text: stringFacet });
    };
    const newValue = 'newValue';
    const App = () => {
        const [facet] = (0, hooks_1.useFacetState)(newValue);
        return (react_1.default.createElement(context.Provider, { value: facet },
            react_1.default.createElement(Component, null)));
    };
    const result = (0, dom_fiber_testing_library_1.render)(react_1.default.createElement(App, null));
    expect(result.baseElement).toContainHTML(newValue);
});
it(`it updates the context value without re-conciliation`, () => {
    const defaultValue = 'defaultValue';
    const context = (0, createFacetContext_1.createFacetContext)(defaultValue);
    const Component = () => {
        const stringFacet = (0, react_1.useContext)(context);
        return react_1.default.createElement("fast-text", { text: stringFacet });
    };
    const newValue = 'newValue';
    let setFacet;
    const hasRenderedMock = jest.fn();
    const App = () => {
        const [stringFacet, setStringFacet] = (0, hooks_1.useFacetState)(newValue);
        setFacet = setStringFacet;
        hasRenderedMock();
        return (react_1.default.createElement(context.Provider, { value: stringFacet },
            react_1.default.createElement(Component, null)));
    };
    const result = (0, dom_fiber_testing_library_1.render)(react_1.default.createElement(App, null));
    expect(hasRenderedMock).toBeCalledTimes(1);
    expect(result.baseElement).toContainHTML(newValue);
    const evenNewerValue = 'newNewValue';
    (0, dom_fiber_testing_library_1.act)(() => {
        setFacet(evenNewerValue);
    });
    expect(result.baseElement).toContainHTML(evenNewerValue);
    expect(hasRenderedMock).toBeCalledTimes(1);
});
// Tests that the intial value of the createFacetContext is static
describe('createFacetContext initial facet', () => {
    const env = process.env;
    let staticFacet;
    const defaultValue = 'defaultValue';
    beforeEach(() => {
        jest.resetModules();
        process.env = Object.assign({}, env);
        const context = (0, createFacetContext_1.createFacetContext)(defaultValue);
        const Component = () => {
            const stringFacet = (0, react_1.useContext)(context);
            staticFacet = stringFacet;
            return react_1.default.createElement("fast-text", { text: stringFacet });
        };
        (0, dom_fiber_testing_library_1.render)(react_1.default.createElement(Component, null));
    });
    afterEach(() => {
        process.env = env;
    });
    it(`it can be read but not mutated`, () => {
        (0, dom_fiber_testing_library_1.act)(() => {
            expect(staticFacet.get()).toBe(defaultValue);
            expect('set' in staticFacet).toBe(false);
        });
    });
    it(`it responds with the same value if you observe it and warns you in a non-production environment`, () => {
        const consoleLogMock = jest.spyOn(console, 'log').mockImplementation();
        const update = jest.fn();
        process.env.NODE_ENV = 'development';
        staticFacet.observe(update);
        expect(update).toHaveBeenCalledTimes(1);
        expect(update).toHaveBeenCalledWith(defaultValue);
        expect(consoleLogMock).toHaveBeenCalledTimes(1);
        expect(consoleLogMock).toHaveBeenCalledWith(`Accessing a static facet created through createFacetContext, perhaps you're missing a Context Provider? initialValue: `, JSON.stringify(defaultValue));
        update.mockClear();
        consoleLogMock.mockClear();
        process.env.NODE_ENV = 'production';
        staticFacet.observe(update);
        expect(update).toHaveBeenCalledTimes(1);
        expect(update).toHaveBeenCalledWith(defaultValue);
        expect(consoleLogMock).toHaveBeenCalledTimes(0);
        process.env.NODE_ENV = 'test'; // Restore NODE_ENV back to test to not mess with subsequent tests
    });
    it(`it responds with the same value if you observe it and warns you in a non-test environment`, () => {
        const consoleLogMock = jest.spyOn(console, 'log').mockImplementation();
        const update = jest.fn();
        process.env.NODE_ENV = 'development';
        staticFacet.observe(update);
        expect(update).toHaveBeenCalledTimes(1);
        expect(update).toHaveBeenCalledWith(defaultValue);
        expect(consoleLogMock).toHaveBeenCalledTimes(1);
        expect(consoleLogMock).toHaveBeenCalledWith(`Accessing a static facet created through createFacetContext, perhaps you're missing a Context Provider? initialValue: `, JSON.stringify(defaultValue));
        update.mockClear();
        consoleLogMock.mockClear();
        process.env.NODE_ENV = 'test';
        staticFacet.observe(update);
        expect(update).toHaveBeenCalledTimes(1);
        expect(update).toHaveBeenCalledWith(defaultValue);
        expect(consoleLogMock).toHaveBeenCalledTimes(0);
    });
    it(`it responds with the same value if you observe it and warns you in a non-production environment once per instance`, () => {
        const consoleLogMock = jest.spyOn(console, 'log').mockImplementation();
        const update = jest.fn();
        process.env.NODE_ENV = 'development';
        staticFacet.observe(update);
        expect(update).toHaveBeenCalledTimes(1);
        expect(update).toHaveBeenCalledWith(defaultValue);
        expect(consoleLogMock).toHaveBeenCalledTimes(1);
        expect(consoleLogMock).toHaveBeenCalledWith(`Accessing a static facet created through createFacetContext, perhaps you're missing a Context Provider? initialValue: `, JSON.stringify(defaultValue));
        update.mockClear();
        consoleLogMock.mockClear();
        staticFacet.observe(update);
        expect(update).toHaveBeenCalledTimes(1);
        expect(update).toHaveBeenCalledWith(defaultValue);
        expect(consoleLogMock).toHaveBeenCalledTimes(0);
        update.mockClear();
        consoleLogMock.mockClear();
        process.env.NODE_ENV = 'test';
        staticFacet.observe(update);
        expect(update).toHaveBeenCalledTimes(1);
        expect(update).toHaveBeenCalledWith(defaultValue);
        expect(consoleLogMock).toHaveBeenCalledTimes(0);
    });
});
//# sourceMappingURL=createFacetContext.spec.js.map